CCS PCM C Compiler, Version 5.015, 5967               18-May-23 17:41

               Filename:   C:\Users\Berke\Desktop\mehmetberke_parlat_lab3\code2\main.lst

               ROM used:   1906 words (23%)
                           Largest free fragment is 2048
               RAM used:   40 (11%) at main() level
                           84 (23%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  06
0001:  MOVWF  0A
0002:  GOTO   66A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   050
002B:  BTFSS  0B.5
002C:  GOTO   02F
002D:  BTFSC  0B.2
002E:  GOTO   053
002F:  MOVF   22,W
0030:  MOVWF  04
0031:  MOVF   23,W
0032:  MOVWF  77
0033:  MOVF   24,W
0034:  MOVWF  78
0035:  MOVF   25,W
0036:  MOVWF  79
0037:  MOVF   26,W
0038:  MOVWF  7A
0039:  MOVF   27,W
003A:  BSF    03.6
003B:  MOVWF  0D
003C:  BCF    03.6
003D:  MOVF   28,W
003E:  BSF    03.6
003F:  MOVWF  0F
0040:  BCF    03.6
0041:  MOVF   29,W
0042:  BSF    03.6
0043:  MOVWF  0C
0044:  BCF    03.6
0045:  MOVF   2A,W
0046:  BSF    03.6
0047:  MOVWF  0E
0048:  BCF    03.6
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   0E8
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   34F
.................... #include <16F877A.h>  
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0056:  MOVLW  8E
0057:  MOVWF  77
0058:  MOVF   60,W
0059:  MOVWF  78
005A:  MOVF   5F,W
005B:  MOVWF  79
005C:  CLRF   7A
005D:  MOVF   78,F
005E:  BTFSS  03.2
005F:  GOTO   06A
0060:  MOVF   79,W
0061:  MOVWF  78
0062:  CLRF   79
0063:  MOVLW  08
0064:  SUBWF  77,F
0065:  MOVF   78,F
0066:  BTFSS  03.2
0067:  GOTO   06A
0068:  CLRF   77
0069:  GOTO   072
006A:  BCF    03.0
006B:  BTFSC  78.7
006C:  GOTO   071
006D:  RLF    79,F
006E:  RLF    78,F
006F:  DECF   77,F
0070:  GOTO   06A
0071:  BCF    78.7
0072:  RETURN
0073:  MOVF   5F,W
0074:  BTFSC  03.2
0075:  GOTO   0E3
0076:  MOVWF  67
0077:  MOVF   63,W
0078:  BTFSC  03.2
0079:  GOTO   0E3
007A:  ADDWF  67,F
007B:  BTFSC  03.0
007C:  GOTO   084
007D:  MOVLW  7F
007E:  SUBWF  67,F
007F:  BTFSS  03.0
0080:  GOTO   0E3
0081:  BTFSC  03.2
0082:  GOTO   0E3
0083:  GOTO   088
0084:  MOVLW  81
0085:  ADDWF  67,F
0086:  BTFSC  03.0
0087:  GOTO   0E3
0088:  MOVF   67,W
0089:  MOVWF  77
008A:  CLRF   78
008B:  CLRF   79
008C:  CLRF   7A
008D:  MOVF   60,W
008E:  MOVWF  6B
008F:  BSF    6B.7
0090:  MOVF   61,W
0091:  MOVWF  6A
0092:  MOVF   62,W
0093:  MOVWF  69
0094:  MOVLW  18
0095:  MOVWF  67
0096:  CLRF   68
0097:  BTFSS  69.0
0098:  GOTO   0B1
0099:  MOVF   66,W
009A:  ADDWF  7A,F
009B:  BTFSS  03.0
009C:  GOTO   0A3
009D:  INCF   79,F
009E:  BTFSS  03.2
009F:  GOTO   0A3
00A0:  INCF   78,F
00A1:  BTFSC  03.2
00A2:  BSF    68.7
00A3:  MOVF   65,W
00A4:  ADDWF  79,F
00A5:  BTFSS  03.0
00A6:  GOTO   0AA
00A7:  INCF   78,F
00A8:  BTFSC  03.2
00A9:  BSF    68.7
00AA:  MOVF   64,W
00AB:  MOVWF  61
00AC:  BSF    61.7
00AD:  MOVF   61,W
00AE:  ADDWF  78,F
00AF:  BTFSC  03.0
00B0:  BSF    68.7
00B1:  RLF    68,F
00B2:  RRF    78,F
00B3:  RRF    79,F
00B4:  RRF    7A,F
00B5:  RRF    6B,F
00B6:  RRF    6A,F
00B7:  RRF    69,F
00B8:  BCF    03.0
00B9:  DECFSZ 67,F
00BA:  GOTO   096
00BB:  MOVLW  01
00BC:  ADDWF  77,F
00BD:  BTFSC  03.0
00BE:  GOTO   0E3
00BF:  BTFSC  78.7
00C0:  GOTO   0C8
00C1:  RLF    6B,F
00C2:  RLF    7A,F
00C3:  RLF    79,F
00C4:  RLF    78,F
00C5:  DECF   77,F
00C6:  BTFSC  03.2
00C7:  GOTO   0E3
00C8:  BTFSS  6B.7
00C9:  GOTO   0D9
00CA:  INCF   7A,F
00CB:  BTFSS  03.2
00CC:  GOTO   0D9
00CD:  INCF   79,F
00CE:  BTFSS  03.2
00CF:  GOTO   0D9
00D0:  INCF   78,F
00D1:  BTFSS  03.2
00D2:  GOTO   0D9
00D3:  RRF    78,F
00D4:  RRF    79,F
00D5:  RRF    7A,F
00D6:  INCF   77,F
00D7:  BTFSC  03.2
00D8:  GOTO   0E3
00D9:  MOVF   60,W
00DA:  MOVWF  68
00DB:  MOVF   64,W
00DC:  XORWF  68,F
00DD:  BTFSS  68.7
00DE:  GOTO   0E1
00DF:  BSF    78.7
00E0:  GOTO   0E7
00E1:  BCF    78.7
00E2:  GOTO   0E7
00E3:  CLRF   77
00E4:  CLRF   78
00E5:  CLRF   79
00E6:  CLRF   7A
00E7:  RETURN
*
011A:  MOVLW  80
011B:  BTFSC  03.1
011C:  XORWF  64,F
011D:  CLRF   69
011E:  CLRF   6A
011F:  MOVF   60,W
0120:  MOVWF  68
0121:  MOVF   64,W
0122:  XORWF  68,F
0123:  MOVF   5F,W
0124:  BTFSC  03.2
0125:  GOTO   20A
0126:  MOVWF  67
0127:  MOVWF  77
0128:  MOVF   63,W
0129:  BTFSC  03.2
012A:  GOTO   213
012B:  SUBWF  67,F
012C:  BTFSC  03.2
012D:  GOTO   1AF
012E:  BTFSS  03.0
012F:  GOTO   16D
0130:  MOVF   64,W
0131:  MOVWF  6D
0132:  BSF    6D.7
0133:  MOVF   65,W
0134:  MOVWF  6C
0135:  MOVF   66,W
0136:  MOVWF  6B
0137:  CLRF   6A
0138:  BCF    03.0
0139:  RRF    6D,F
013A:  RRF    6C,F
013B:  RRF    6B,F
013C:  RRF    6A,F
013D:  DECFSZ 67,F
013E:  GOTO   137
013F:  BTFSS  68.7
0140:  GOTO   144
0141:  BSF    69.0
0142:  GOTO   227
0143:  BCF    69.0
0144:  BCF    67.0
0145:  BSF    69.4
0146:  MOVLW  62
0147:  MOVWF  04
0148:  BCF    03.7
0149:  GOTO   23C
014A:  BCF    69.4
014B:  BTFSC  68.7
014C:  GOTO   157
014D:  BTFSS  67.0
014E:  GOTO   162
014F:  RRF    6D,F
0150:  RRF    6C,F
0151:  RRF    6B,F
0152:  RRF    6A,F
0153:  INCF   77,F
0154:  BTFSC  03.2
0155:  GOTO   222
0156:  GOTO   162
0157:  BTFSC  6D.7
0158:  GOTO   165
0159:  BCF    03.0
015A:  RLF    6A,F
015B:  RLF    6B,F
015C:  RLF    6C,F
015D:  RLF    6D,F
015E:  DECF   77,F
015F:  BTFSC  03.2
0160:  GOTO   222
0161:  GOTO   157
0162:  BSF    69.6
0163:  GOTO   1CF
0164:  BCF    69.6
0165:  MOVF   60,W
0166:  MOVWF  68
0167:  BTFSS  68.7
0168:  GOTO   16B
0169:  BSF    6D.7
016A:  GOTO   21B
016B:  BCF    6D.7
016C:  GOTO   21B
016D:  MOVF   63,W
016E:  MOVWF  67
016F:  MOVWF  77
0170:  MOVF   5F,W
0171:  SUBWF  67,F
0172:  MOVF   60,W
0173:  MOVWF  6D
0174:  BSF    6D.7
0175:  MOVF   61,W
0176:  MOVWF  6C
0177:  MOVF   62,W
0178:  MOVWF  6B
0179:  CLRF   6A
017A:  BCF    03.0
017B:  RRF    6D,F
017C:  RRF    6C,F
017D:  RRF    6B,F
017E:  RRF    6A,F
017F:  DECFSZ 67,F
0180:  GOTO   179
0181:  BTFSS  68.7
0182:  GOTO   186
0183:  BSF    69.1
0184:  GOTO   227
0185:  BCF    69.1
0186:  BCF    67.0
0187:  BSF    69.5
0188:  MOVLW  66
0189:  MOVWF  04
018A:  BCF    03.7
018B:  GOTO   23C
018C:  BCF    69.5
018D:  BTFSC  68.7
018E:  GOTO   199
018F:  BTFSS  67.0
0190:  GOTO   1A4
0191:  RRF    6D,F
0192:  RRF    6C,F
0193:  RRF    6B,F
0194:  RRF    6A,F
0195:  INCF   77,F
0196:  BTFSC  03.2
0197:  GOTO   222
0198:  GOTO   1A4
0199:  BTFSC  6D.7
019A:  GOTO   1A7
019B:  BCF    03.0
019C:  RLF    6A,F
019D:  RLF    6B,F
019E:  RLF    6C,F
019F:  RLF    6D,F
01A0:  DECF   77,F
01A1:  BTFSC  03.2
01A2:  GOTO   222
01A3:  GOTO   199
01A4:  BSF    69.7
01A5:  GOTO   1CF
01A6:  BCF    69.7
01A7:  MOVF   64,W
01A8:  MOVWF  68
01A9:  BTFSS  68.7
01AA:  GOTO   1AD
01AB:  BSF    6D.7
01AC:  GOTO   21B
01AD:  BCF    6D.7
01AE:  GOTO   21B
01AF:  MOVF   64,W
01B0:  MOVWF  6D
01B1:  BSF    6D.7
01B2:  MOVF   65,W
01B3:  MOVWF  6C
01B4:  MOVF   66,W
01B5:  MOVWF  6B
01B6:  BTFSS  68.7
01B7:  GOTO   1BC
01B8:  BCF    6D.7
01B9:  BSF    69.2
01BA:  GOTO   227
01BB:  BCF    69.2
01BC:  CLRF   6A
01BD:  BCF    67.0
01BE:  MOVLW  62
01BF:  MOVWF  04
01C0:  BCF    03.7
01C1:  GOTO   23C
01C2:  BTFSC  68.7
01C3:  GOTO   1E5
01C4:  MOVF   60,W
01C5:  MOVWF  68
01C6:  BTFSS  67.0
01C7:  GOTO   1CF
01C8:  RRF    6D,F
01C9:  RRF    6C,F
01CA:  RRF    6B,F
01CB:  RRF    6A,F
01CC:  INCF   77,F
01CD:  BTFSC  03.2
01CE:  GOTO   222
01CF:  BTFSS  6A.7
01D0:  GOTO   1E0
01D1:  INCF   6B,F
01D2:  BTFSS  03.2
01D3:  GOTO   1E0
01D4:  INCF   6C,F
01D5:  BTFSS  03.2
01D6:  GOTO   1E0
01D7:  INCF   6D,F
01D8:  BTFSS  03.2
01D9:  GOTO   1E0
01DA:  RRF    6D,F
01DB:  RRF    6C,F
01DC:  RRF    6B,F
01DD:  INCF   77,F
01DE:  BTFSC  03.2
01DF:  GOTO   222
01E0:  BTFSC  69.6
01E1:  GOTO   164
01E2:  BTFSC  69.7
01E3:  GOTO   1A6
01E4:  GOTO   204
01E5:  MOVLW  80
01E6:  XORWF  6D,F
01E7:  BTFSS  6D.7
01E8:  GOTO   1ED
01E9:  GOTO   227
01EA:  MOVF   64,W
01EB:  MOVWF  68
01EC:  GOTO   1FA
01ED:  MOVF   60,W
01EE:  MOVWF  68
01EF:  MOVF   6D,F
01F0:  BTFSS  03.2
01F1:  GOTO   1FA
01F2:  MOVF   6C,F
01F3:  BTFSS  03.2
01F4:  GOTO   1FA
01F5:  MOVF   6B,F
01F6:  BTFSS  03.2
01F7:  GOTO   1FA
01F8:  CLRF   77
01F9:  GOTO   21B
01FA:  BTFSC  6D.7
01FB:  GOTO   204
01FC:  BCF    03.0
01FD:  RLF    6A,F
01FE:  RLF    6B,F
01FF:  RLF    6C,F
0200:  RLF    6D,F
0201:  DECFSZ 77,F
0202:  GOTO   1FA
0203:  GOTO   222
0204:  BTFSS  68.7
0205:  GOTO   208
0206:  BSF    6D.7
0207:  GOTO   21B
0208:  BCF    6D.7
0209:  GOTO   21B
020A:  MOVF   63,W
020B:  MOVWF  77
020C:  MOVF   64,W
020D:  MOVWF  6D
020E:  MOVF   65,W
020F:  MOVWF  6C
0210:  MOVF   66,W
0211:  MOVWF  6B
0212:  GOTO   21B
0213:  MOVF   5F,W
0214:  MOVWF  77
0215:  MOVF   60,W
0216:  MOVWF  6D
0217:  MOVF   61,W
0218:  MOVWF  6C
0219:  MOVF   62,W
021A:  MOVWF  6B
021B:  MOVF   6D,W
021C:  MOVWF  78
021D:  MOVF   6C,W
021E:  MOVWF  79
021F:  MOVF   6B,W
0220:  MOVWF  7A
0221:  GOTO   25A
0222:  CLRF   77
0223:  CLRF   78
0224:  CLRF   79
0225:  CLRF   7A
0226:  GOTO   25A
0227:  CLRF   6A
0228:  COMF   6B,F
0229:  COMF   6C,F
022A:  COMF   6D,F
022B:  COMF   6A,F
022C:  INCF   6A,F
022D:  BTFSS  03.2
022E:  GOTO   235
022F:  INCF   6B,F
0230:  BTFSS  03.2
0231:  GOTO   235
0232:  INCF   6C,F
0233:  BTFSC  03.2
0234:  INCF   6D,F
0235:  BTFSC  69.0
0236:  GOTO   143
0237:  BTFSC  69.1
0238:  GOTO   185
0239:  BTFSC  69.2
023A:  GOTO   1BB
023B:  GOTO   1EA
023C:  MOVF   00,W
023D:  ADDWF  6B,F
023E:  BTFSS  03.0
023F:  GOTO   246
0240:  INCF   6C,F
0241:  BTFSS  03.2
0242:  GOTO   246
0243:  INCF   6D,F
0244:  BTFSC  03.2
0245:  BSF    67.0
0246:  DECF   04,F
0247:  MOVF   00,W
0248:  ADDWF  6C,F
0249:  BTFSS  03.0
024A:  GOTO   24E
024B:  INCF   6D,F
024C:  BTFSC  03.2
024D:  BSF    67.0
024E:  DECF   04,F
024F:  MOVF   00,W
0250:  BTFSS  00.7
0251:  XORLW  80
0252:  ADDWF  6D,F
0253:  BTFSC  03.0
0254:  BSF    67.0
0255:  BTFSC  69.4
0256:  GOTO   14A
0257:  BTFSC  69.5
0258:  GOTO   18C
0259:  GOTO   1C2
*
0272:  MOVF   5F,W
0273:  BTFSC  03.2
0274:  GOTO   337
0275:  MOVWF  6B
0276:  MOVF   63,W
0277:  BTFSC  03.2
0278:  GOTO   337
0279:  SUBWF  6B,F
027A:  BTFSS  03.0
027B:  GOTO   281
027C:  MOVLW  7F
027D:  ADDWF  6B,F
027E:  BTFSC  03.0
027F:  GOTO   337
0280:  GOTO   287
0281:  MOVLW  81
0282:  SUBWF  6B,F
0283:  BTFSS  03.0
0284:  GOTO   337
0285:  BTFSC  03.2
0286:  GOTO   337
0287:  MOVF   6B,W
0288:  MOVWF  77
0289:  CLRF   78
028A:  CLRF   79
028B:  CLRF   7A
028C:  CLRF   6A
028D:  MOVF   60,W
028E:  MOVWF  69
028F:  BSF    69.7
0290:  MOVF   61,W
0291:  MOVWF  68
0292:  MOVF   62,W
0293:  MOVWF  67
0294:  MOVLW  19
0295:  MOVWF  6B
0296:  MOVF   66,W
0297:  SUBWF  67,F
0298:  BTFSC  03.0
0299:  GOTO   2AA
029A:  MOVLW  01
029B:  SUBWF  68,F
029C:  BTFSC  03.0
029D:  GOTO   2AA
029E:  SUBWF  69,F
029F:  BTFSC  03.0
02A0:  GOTO   2AA
02A1:  SUBWF  6A,F
02A2:  BTFSC  03.0
02A3:  GOTO   2AA
02A4:  INCF   6A,F
02A5:  INCF   69,F
02A6:  INCF   68,F
02A7:  MOVF   66,W
02A8:  ADDWF  67,F
02A9:  GOTO   2DC
02AA:  MOVF   65,W
02AB:  SUBWF  68,F
02AC:  BTFSC  03.0
02AD:  GOTO   2C5
02AE:  MOVLW  01
02AF:  SUBWF  69,F
02B0:  BTFSC  03.0
02B1:  GOTO   2C5
02B2:  SUBWF  6A,F
02B3:  BTFSC  03.0
02B4:  GOTO   2C5
02B5:  INCF   6A,F
02B6:  INCF   69,F
02B7:  MOVF   65,W
02B8:  ADDWF  68,F
02B9:  MOVF   66,W
02BA:  ADDWF  67,F
02BB:  BTFSS  03.0
02BC:  GOTO   2DC
02BD:  INCF   68,F
02BE:  BTFSS  03.2
02BF:  GOTO   2DC
02C0:  INCF   69,F
02C1:  BTFSS  03.2
02C2:  GOTO   2DC
02C3:  INCF   6A,F
02C4:  GOTO   2DC
02C5:  MOVF   64,W
02C6:  IORLW  80
02C7:  SUBWF  69,F
02C8:  BTFSC  03.0
02C9:  GOTO   2DB
02CA:  MOVLW  01
02CB:  SUBWF  6A,F
02CC:  BTFSC  03.0
02CD:  GOTO   2DB
02CE:  INCF   6A,F
02CF:  MOVF   64,W
02D0:  IORLW  80
02D1:  ADDWF  69,F
02D2:  MOVF   65,W
02D3:  ADDWF  68,F
02D4:  BTFSS  03.0
02D5:  GOTO   2B9
02D6:  INCF   69,F
02D7:  BTFSS  03.2
02D8:  GOTO   2B9
02D9:  INCF   6A,F
02DA:  GOTO   2B9
02DB:  BSF    7A.0
02DC:  DECFSZ 6B,F
02DD:  GOTO   2DF
02DE:  GOTO   2EA
02DF:  BCF    03.0
02E0:  RLF    67,F
02E1:  RLF    68,F
02E2:  RLF    69,F
02E3:  RLF    6A,F
02E4:  BCF    03.0
02E5:  RLF    7A,F
02E6:  RLF    79,F
02E7:  RLF    78,F
02E8:  RLF    6C,F
02E9:  GOTO   296
02EA:  BTFSS  6C.0
02EB:  GOTO   2F2
02EC:  BCF    03.0
02ED:  RRF    78,F
02EE:  RRF    79,F
02EF:  RRF    7A,F
02F0:  RRF    6C,F
02F1:  GOTO   2F5
02F2:  DECF   77,F
02F3:  BTFSC  03.2
02F4:  GOTO   337
02F5:  BTFSC  6C.7
02F6:  GOTO   31E
02F7:  BCF    03.0
02F8:  RLF    67,F
02F9:  RLF    68,F
02FA:  RLF    69,F
02FB:  RLF    6A,F
02FC:  MOVF   66,W
02FD:  SUBWF  67,F
02FE:  BTFSC  03.0
02FF:  GOTO   30A
0300:  MOVLW  01
0301:  SUBWF  68,F
0302:  BTFSC  03.0
0303:  GOTO   30A
0304:  SUBWF  69,F
0305:  BTFSC  03.0
0306:  GOTO   30A
0307:  SUBWF  6A,F
0308:  BTFSS  03.0
0309:  GOTO   32D
030A:  MOVF   65,W
030B:  SUBWF  68,F
030C:  BTFSC  03.0
030D:  GOTO   315
030E:  MOVLW  01
030F:  SUBWF  69,F
0310:  BTFSC  03.0
0311:  GOTO   315
0312:  SUBWF  6A,F
0313:  BTFSS  03.0
0314:  GOTO   32D
0315:  MOVF   64,W
0316:  IORLW  80
0317:  SUBWF  69,F
0318:  BTFSC  03.0
0319:  GOTO   31E
031A:  MOVLW  01
031B:  SUBWF  6A,F
031C:  BTFSS  03.0
031D:  GOTO   32D
031E:  INCF   7A,F
031F:  BTFSS  03.2
0320:  GOTO   32D
0321:  INCF   79,F
0322:  BTFSS  03.2
0323:  GOTO   32D
0324:  INCF   78,F
0325:  BTFSS  03.2
0326:  GOTO   32D
0327:  INCF   77,F
0328:  BTFSC  03.2
0329:  GOTO   337
032A:  RRF    78,F
032B:  RRF    79,F
032C:  RRF    7A,F
032D:  MOVF   60,W
032E:  MOVWF  6B
032F:  MOVF   64,W
0330:  XORWF  6B,F
0331:  BTFSS  6B.7
0332:  GOTO   335
0333:  BSF    78.7
0334:  GOTO   33B
0335:  BCF    78.7
0336:  GOTO   33B
0337:  CLRF   77
0338:  CLRF   78
0339:  CLRF   79
033A:  CLRF   7A
*
0358:  DATA 8C,20
0359:  DATA EE,33
035A:  DATA EC,32
035B:  DATA BA,12
035C:  DATA EC,3A
035D:  DATA 0A,00
*
0418:  MOVLW  8E
0419:  MOVWF  77
041A:  MOVF   45,W
041B:  SUBWF  77,F
041C:  MOVF   46,W
041D:  MOVWF  79
041E:  MOVF   47,W
041F:  MOVWF  78
0420:  BSF    79.7
0421:  MOVF   77,F
0422:  BTFSC  03.2
0423:  GOTO   42F
0424:  BCF    03.0
0425:  MOVF   79,F
0426:  BTFSS  03.2
0427:  GOTO   42B
0428:  MOVF   78,F
0429:  BTFSC  03.2
042A:  GOTO   42F
042B:  RRF    79,F
042C:  RRF    78,F
042D:  DECFSZ 77,F
042E:  GOTO   424
042F:  BTFSS  46.7
0430:  GOTO   436
0431:  COMF   78,F
0432:  COMF   79,F
0433:  INCF   78,F
0434:  BTFSC  03.2
0435:  INCF   79,F
0436:  BCF    0A.3
0437:  BCF    0A.4
0438:  GOTO   713 (RETURN)
*
0477:  MOVF   0B,W
0478:  MOVWF  46
0479:  BCF    0B.7
047A:  BSF    03.5
047B:  BSF    03.6
047C:  BSF    0C.7
047D:  BSF    0C.0
047E:  NOP
047F:  NOP
0480:  BCF    03.5
0481:  BCF    03.6
0482:  BTFSC  46.7
0483:  BSF    0B.7
0484:  BTFSC  03.0
0485:  GOTO   4AE
0486:  BSF    03.6
0487:  MOVF   0C,W
0488:  ANDLW  7F
0489:  BCF    03.6
048A:  MOVWF  46
048B:  BSF    03.6
048C:  MOVF   0D,W
048D:  BCF    03.6
048E:  MOVWF  47
048F:  BSF    03.6
0490:  MOVF   0F,W
0491:  BCF    03.6
0492:  MOVWF  48
0493:  MOVF   46,W
0494:  MOVWF  52
0495:  CALL   44B
0496:  MOVF   47,W
0497:  BSF    03.6
0498:  MOVWF  0D
0499:  BCF    03.6
049A:  MOVF   48,W
049B:  BSF    03.6
049C:  MOVWF  0F
049D:  BCF    03.6
049E:  MOVF   0B,W
049F:  MOVWF  49
04A0:  BCF    0B.7
04A1:  BSF    03.5
04A2:  BSF    03.6
04A3:  BSF    0C.7
04A4:  BSF    0C.0
04A5:  NOP
04A6:  NOP
04A7:  BCF    03.5
04A8:  BCF    03.6
04A9:  BTFSC  49.7
04AA:  BSF    0B.7
04AB:  DECFSZ 45,F
04AC:  GOTO   4AE
04AD:  GOTO   4CD
04AE:  BSF    03.6
04AF:  RLF    0C,W
04B0:  RLF    0E,W
04B1:  ANDLW  7F
04B2:  BCF    03.6
04B3:  MOVWF  46
04B4:  BSF    03.6
04B5:  MOVF   0D,W
04B6:  BCF    03.6
04B7:  MOVWF  47
04B8:  BSF    03.6
04B9:  MOVF   0F,W
04BA:  BCF    03.6
04BB:  MOVWF  48
04BC:  MOVF   46,W
04BD:  MOVWF  52
04BE:  CALL   44B
04BF:  MOVF   47,W
04C0:  BSF    03.6
04C1:  MOVWF  0D
04C2:  BCF    03.6
04C3:  MOVF   48,W
04C4:  BSF    03.6
04C5:  MOVWF  0F
04C6:  INCF   0D,F
04C7:  BTFSC  03.2
04C8:  INCF   0F,F
04C9:  BCF    03.0
04CA:  BCF    03.6
04CB:  DECFSZ 45,F
04CC:  GOTO   477
04CD:  BCF    0A.3
04CE:  BCF    0A.4
04CF:  GOTO   734 (RETURN)
04D0:  CLRF   4D
04D1:  MOVF   04,W
04D2:  MOVWF  4C
04D3:  BCF    4D.0
04D4:  BTFSC  03.7
04D5:  BSF    4D.0
04D6:  SWAPF  46,W
04D7:  IORLW  F0
04D8:  MOVWF  48
04D9:  ADDWF  48,F
04DA:  ADDLW  E2
04DB:  MOVWF  49
04DC:  ADDLW  32
04DD:  MOVWF  4B
04DE:  MOVF   46,W
04DF:  ANDLW  0F
04E0:  ADDWF  49,F
04E1:  ADDWF  49,F
04E2:  ADDWF  4B,F
04E3:  ADDLW  E9
04E4:  MOVWF  4A
04E5:  ADDWF  4A,F
04E6:  ADDWF  4A,F
04E7:  SWAPF  45,W
04E8:  ANDLW  0F
04E9:  ADDWF  4A,F
04EA:  ADDWF  4B,F
04EB:  RLF    4A,F
04EC:  RLF    4B,F
04ED:  COMF   4B,F
04EE:  RLF    4B,F
04EF:  MOVF   45,W
04F0:  ANDLW  0F
04F1:  ADDWF  4B,F
04F2:  RLF    48,F
04F3:  MOVLW  07
04F4:  MOVWF  47
04F5:  MOVLW  0A
04F6:  ADDWF  4B,F
04F7:  DECF   4A,F
04F8:  BTFSS  03.0
04F9:  GOTO   4F6
04FA:  ADDWF  4A,F
04FB:  DECF   49,F
04FC:  BTFSS  03.0
04FD:  GOTO   4FA
04FE:  ADDWF  49,F
04FF:  DECF   48,F
0500:  BTFSS  03.0
0501:  GOTO   4FE
0502:  ADDWF  48,F
0503:  DECF   47,F
0504:  BTFSS  03.0
0505:  GOTO   502
0506:  MOVLW  47
0507:  MOVWF  04
0508:  BCF    03.7
0509:  MOVLW  07
050A:  ANDWF  4C,W
050B:  BCF    4C.6
050C:  ADDWF  04,F
050D:  MOVLW  4B
050E:  SUBWF  04,W
050F:  BTFSC  03.2
0510:  BSF    4C.6
0511:  MOVF   00,W
0512:  MOVWF  77
0513:  BTFSS  03.2
0514:  GOTO   51D
0515:  BTFSC  4C.6
0516:  GOTO   51D
0517:  BTFSC  4C.4
0518:  GOTO   52F
0519:  BTFSC  4C.3
051A:  GOTO   51D
051B:  MOVLW  20
051C:  GOTO   520
051D:  BSF    4C.3
051E:  BCF    4C.4
051F:  MOVLW  30
0520:  ADDWF  77,F
0521:  CLRF   46
0522:  MOVF   04,W
0523:  MOVWF  45
0524:  BCF    46.0
0525:  BTFSC  03.7
0526:  BSF    46.0
0527:  MOVF   77,W
0528:  MOVWF  52
0529:  CALL   44B
052A:  MOVF   45,W
052B:  MOVWF  04
052C:  BCF    03.7
052D:  BTFSC  46.0
052E:  BSF    03.7
052F:  INCF   04,F
0530:  BTFSS  4C.6
0531:  GOTO   50D
0532:  BCF    0A.3
0533:  BCF    0A.4
0534:  GOTO   73B (RETURN)
0535:  BTFSC  03.1
0536:  GOTO   53A
0537:  MOVLW  5A
0538:  MOVWF  04
0539:  BCF    03.7
053A:  CLRF   77
053B:  CLRF   78
053C:  CLRF   79
053D:  CLRF   7A
053E:  CLRF   5A
053F:  CLRF   5B
0540:  CLRF   5C
0541:  CLRF   5D
0542:  MOVF   59,W
0543:  IORWF  58,W
0544:  IORWF  57,W
0545:  IORWF  56,W
0546:  BTFSC  03.2
0547:  GOTO   578
0548:  MOVLW  20
0549:  MOVWF  5E
054A:  BCF    03.0
054B:  RLF    52,F
054C:  RLF    53,F
054D:  RLF    54,F
054E:  RLF    55,F
054F:  RLF    5A,F
0550:  RLF    5B,F
0551:  RLF    5C,F
0552:  RLF    5D,F
0553:  MOVF   59,W
0554:  SUBWF  5D,W
0555:  BTFSS  03.2
0556:  GOTO   561
0557:  MOVF   58,W
0558:  SUBWF  5C,W
0559:  BTFSS  03.2
055A:  GOTO   561
055B:  MOVF   57,W
055C:  SUBWF  5B,W
055D:  BTFSS  03.2
055E:  GOTO   561
055F:  MOVF   56,W
0560:  SUBWF  5A,W
0561:  BTFSS  03.0
0562:  GOTO   572
0563:  MOVF   56,W
0564:  SUBWF  5A,F
0565:  MOVF   57,W
0566:  BTFSS  03.0
0567:  INCFSZ 57,W
0568:  SUBWF  5B,F
0569:  MOVF   58,W
056A:  BTFSS  03.0
056B:  INCFSZ 58,W
056C:  SUBWF  5C,F
056D:  MOVF   59,W
056E:  BTFSS  03.0
056F:  INCFSZ 59,W
0570:  SUBWF  5D,F
0571:  BSF    03.0
0572:  RLF    77,F
0573:  RLF    78,F
0574:  RLF    79,F
0575:  RLF    7A,F
0576:  DECFSZ 5E,F
0577:  GOTO   54A
0578:  MOVF   5A,W
0579:  MOVWF  00
057A:  INCF   04,F
057B:  MOVF   5B,W
057C:  MOVWF  00
057D:  INCF   04,F
057E:  MOVF   5C,W
057F:  MOVWF  00
0580:  INCF   04,F
0581:  MOVF   5D,W
0582:  MOVWF  00
0583:  RETURN
0584:  MOVF   04,W
0585:  MOVWF  4A
0586:  MOVF   49,W
0587:  MOVWF  4C
0588:  BTFSC  03.2
0589:  GOTO   5A9
058A:  CLRF   2B
058B:  BTFSC  0B.7
058C:  BSF    2B.7
058D:  BCF    0B.7
058E:  MOVF   48,W
058F:  MOVWF  62
0590:  MOVF   47,W
0591:  MOVWF  61
0592:  MOVF   46,W
0593:  MOVWF  60
0594:  MOVF   45,W
0595:  MOVWF  5F
0596:  CLRF   66
0597:  CLRF   65
0598:  MOVLW  20
0599:  MOVWF  64
059A:  MOVLW  82
059B:  MOVWF  63
059C:  CALL   073
059D:  BTFSC  2B.7
059E:  BSF    0B.7
059F:  MOVF   7A,W
05A0:  MOVWF  48
05A1:  MOVF   79,W
05A2:  MOVWF  47
05A3:  MOVF   78,W
05A4:  MOVWF  46
05A5:  MOVF   77,W
05A6:  MOVWF  45
05A7:  DECFSZ 4C,F
05A8:  GOTO   58A
05A9:  MOVF   48,W
05AA:  MOVWF  55
05AB:  MOVF   47,W
05AC:  MOVWF  54
05AD:  MOVF   46,W
05AE:  MOVWF  53
05AF:  MOVF   45,W
05B0:  MOVWF  52
05B1:  MOVF   52,W
05B2:  SUBLW  B6
05B3:  MOVWF  52
05B4:  CLRF   7A
05B5:  MOVF   53,W
05B6:  MOVWF  56
05B7:  BSF    53.7
05B8:  BCF    03.0
05B9:  RRF    53,F
05BA:  RRF    54,F
05BB:  RRF    55,F
05BC:  RRF    7A,F
05BD:  RRF    79,F
05BE:  RRF    78,F
05BF:  RRF    77,F
05C0:  DECFSZ 52,F
05C1:  GOTO   5B8
05C2:  BTFSS  56.7
05C3:  GOTO   5CF
05C4:  COMF   77,F
05C5:  COMF   78,F
05C6:  COMF   79,F
05C7:  COMF   7A,F
05C8:  INCF   77,F
05C9:  BTFSC  03.2
05CA:  INCF   78,F
05CB:  BTFSC  03.2
05CC:  INCF   79,F
05CD:  BTFSC  03.2
05CE:  INCF   7A,F
05CF:  MOVF   7A,W
05D0:  MOVWF  48
05D1:  MOVF   79,W
05D2:  MOVWF  47
05D3:  MOVF   78,W
05D4:  MOVWF  46
05D5:  MOVF   77,W
05D6:  MOVWF  45
05D7:  BTFSS  48.7
05D8:  GOTO   5E6
05D9:  DECF   4A,F
05DA:  BSF    4A.5
05DB:  COMF   45,F
05DC:  COMF   46,F
05DD:  COMF   47,F
05DE:  COMF   48,F
05DF:  INCF   45,F
05E0:  BTFSC  03.2
05E1:  INCF   46,F
05E2:  BTFSC  03.2
05E3:  INCF   47,F
05E4:  BTFSC  03.2
05E5:  INCF   48,F
05E6:  MOVLW  3B
05E7:  MOVWF  51
05E8:  MOVLW  9A
05E9:  MOVWF  50
05EA:  MOVLW  CA
05EB:  MOVWF  4F
05EC:  CLRF   4E
05ED:  MOVLW  0A
05EE:  MOVWF  4C
05EF:  MOVF   49,W
05F0:  BTFSC  03.2
05F1:  INCF   4A,F
05F2:  BSF    03.1
05F3:  MOVLW  45
05F4:  MOVWF  04
05F5:  BCF    03.7
05F6:  MOVF   48,W
05F7:  MOVWF  55
05F8:  MOVF   47,W
05F9:  MOVWF  54
05FA:  MOVF   46,W
05FB:  MOVWF  53
05FC:  MOVF   45,W
05FD:  MOVWF  52
05FE:  MOVF   51,W
05FF:  MOVWF  59
0600:  MOVF   50,W
0601:  MOVWF  58
0602:  MOVF   4F,W
0603:  MOVWF  57
0604:  MOVF   4E,W
0605:  MOVWF  56
0606:  CALL   535
0607:  MOVF   78,W
0608:  MOVF   77,F
0609:  BTFSS  03.2
060A:  GOTO   61E
060B:  INCF   49,W
060C:  SUBWF  4C,W
060D:  BTFSC  03.2
060E:  GOTO   61E
060F:  MOVF   4A,W
0610:  BTFSC  03.2
0611:  GOTO   620
0612:  ANDLW  0F
0613:  SUBWF  4C,W
0614:  BTFSC  03.2
0615:  GOTO   618
0616:  BTFSC  03.0
0617:  GOTO   650
0618:  BTFSC  4A.7
0619:  GOTO   650
061A:  BTFSC  4A.6
061B:  GOTO   620
061C:  MOVLW  20
061D:  GOTO   64C
061E:  MOVLW  20
061F:  ANDWF  4A,F
0620:  BTFSS  4A.5
0621:  GOTO   62E
0622:  BCF    4A.5
0623:  MOVF   49,W
0624:  BTFSS  03.2
0625:  DECF   4A,F
0626:  MOVF   77,W
0627:  MOVWF  4A
0628:  MOVLW  2D
0629:  MOVWF  52
062A:  CALL   44B
062B:  MOVF   4A,W
062C:  MOVWF  77
062D:  CLRF   4A
062E:  MOVF   49,W
062F:  SUBWF  4C,W
0630:  BTFSS  03.2
0631:  GOTO   63C
0632:  MOVF   77,W
0633:  MOVWF  4A
0634:  MOVLW  2E
0635:  MOVWF  52
0636:  CALL   44B
0637:  MOVF   4A,W
0638:  MOVWF  77
0639:  MOVLW  20
063A:  ANDWF  4A,F
063B:  MOVLW  00
063C:  MOVLW  30
063D:  BTFSS  4A.5
063E:  GOTO   64C
063F:  BCF    4A.5
0640:  MOVF   49,W
0641:  BTFSS  03.2
0642:  DECF   4A,F
0643:  MOVF   77,W
0644:  MOVWF  4A
0645:  MOVLW  2D
0646:  MOVWF  52
0647:  CALL   44B
0648:  MOVF   4A,W
0649:  MOVWF  77
064A:  CLRF   4A
064B:  MOVLW  30
064C:  ADDWF  77,F
064D:  MOVF   77,W
064E:  MOVWF  52
064F:  CALL   44B
0650:  BCF    03.1
0651:  MOVF   51,W
0652:  MOVWF  55
0653:  MOVF   50,W
0654:  MOVWF  54
0655:  MOVF   4F,W
0656:  MOVWF  53
0657:  MOVF   4E,W
0658:  MOVWF  52
0659:  CLRF   59
065A:  CLRF   58
065B:  CLRF   57
065C:  MOVLW  0A
065D:  MOVWF  56
065E:  CALL   535
065F:  MOVF   7A,W
0660:  MOVWF  51
0661:  MOVF   79,W
0662:  MOVWF  50
0663:  MOVF   78,W
0664:  MOVWF  4F
0665:  MOVF   77,W
0666:  MOVWF  4E
0667:  DECFSZ 4C,F
0668:  GOTO   5F2
0669:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10  
.................... #FUSES NOWDT                    //No Watch Dog Timer  
.................... #FUSES NOBROWNOUT               //No brownout reset  
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O  
....................  
....................   
....................  
.................... #use delay(crystal=20000000)  
*
035E:  MOVLW  53
035F:  MOVWF  04
0360:  BCF    03.7
0361:  MOVF   00,W
0362:  BTFSC  03.2
0363:  GOTO   371
0364:  MOVLW  06
0365:  MOVWF  78
0366:  CLRF   77
0367:  DECFSZ 77,F
0368:  GOTO   367
0369:  DECFSZ 78,F
036A:  GOTO   366
036B:  MOVLW  7B
036C:  MOVWF  77
036D:  DECFSZ 77,F
036E:  GOTO   36D
036F:  DECFSZ 00,F
0370:  GOTO   364
0371:  RETURN
....................  
....................   
....................  
.................... #include <lcd.c>  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
038F:  MOVLW  0F
0390:  BSF    03.5
0391:  ANDWF  08,W
0392:  IORLW  F0
0393:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0394:  BCF    03.5
0395:  BSF    08.2
....................    delay_cycles(1); 
0396:  NOP
....................    lcd_output_enable(1); 
0397:  BSF    08.0
....................    delay_cycles(1); 
0398:  NOP
....................    high = lcd_read_nibble(); 
0399:  CALL   383
039A:  MOVF   78,W
039B:  MOVWF  5A
....................        
....................    lcd_output_enable(0); 
039C:  BCF    08.0
....................    delay_cycles(1); 
039D:  NOP
....................    lcd_output_enable(1); 
039E:  BSF    08.0
....................    delay_us(1); 
039F:  GOTO   3A0
03A0:  GOTO   3A1
03A1:  NOP
....................    low = lcd_read_nibble(); 
03A2:  CALL   383
03A3:  MOVF   78,W
03A4:  MOVWF  59
....................        
....................    lcd_output_enable(0); 
03A5:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
03A6:  MOVLW  0F
03A7:  BSF    03.5
03A8:  ANDWF  08,W
03A9:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
03AA:  BCF    03.5
03AB:  SWAPF  5A,W
03AC:  MOVWF  77
03AD:  MOVLW  F0
03AE:  ANDWF  77,F
03AF:  MOVF   77,W
03B0:  IORWF  59,W
03B1:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0383:  MOVF   08,W
0384:  MOVWF  77
0385:  SWAPF  08,W
0386:  ANDLW  0F
0387:  MOVWF  78
....................   #endif 
0388:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0372:  SWAPF  5A,W
0373:  ANDLW  F0
0374:  MOVWF  77
0375:  MOVLW  0F
0376:  ANDWF  08,W
0377:  IORWF  77,W
0378:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0379:  NOP
....................    lcd_output_enable(1); 
037A:  BSF    08.0
....................    delay_us(2); 
037B:  MOVLW  02
037C:  MOVWF  77
037D:  DECFSZ 77,F
037E:  GOTO   37D
037F:  GOTO   380
0380:  NOP
....................    lcd_output_enable(0); 
0381:  BCF    08.0
0382:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0389:  BSF    03.5
038A:  BCF    08.0
....................    lcd_rs_tris(); 
038B:  BCF    08.1
....................    lcd_rw_tris(); 
038C:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
038D:  BCF    03.5
038E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
03B2:  MOVF   78,W
03B3:  MOVWF  59
03B4:  BTFSC  59.7
03B5:  GOTO   38F
....................    lcd_output_rs(address); 
03B6:  BTFSS  57.0
03B7:  BCF    08.1
03B8:  BTFSC  57.0
03B9:  BSF    08.1
....................    delay_cycles(1); 
03BA:  NOP
....................    lcd_output_rw(0); 
03BB:  BCF    08.2
....................    delay_cycles(1); 
03BC:  NOP
....................    lcd_output_enable(0); 
03BD:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
03BE:  SWAPF  58,W
03BF:  MOVWF  59
03C0:  MOVLW  0F
03C1:  ANDWF  59,F
03C2:  MOVF   59,W
03C3:  MOVWF  5A
03C4:  CALL   372
....................    lcd_send_nibble(n & 0xf); 
03C5:  MOVF   58,W
03C6:  ANDLW  0F
03C7:  MOVWF  59
03C8:  MOVWF  5A
03C9:  CALL   372
03CA:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
03CB:  MOVLW  28
03CC:  MOVWF  46
03CD:  MOVLW  0C
03CE:  MOVWF  47
03CF:  MOVLW  01
03D0:  MOVWF  48
03D1:  MOVLW  06
03D2:  MOVWF  49
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
03D3:  BCF    08.0
....................    lcd_output_rs(0); 
03D4:  BCF    08.1
....................    lcd_output_rw(0); 
03D5:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
03D6:  MOVLW  0F
03D7:  BSF    03.5
03D8:  ANDWF  08,W
03D9:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
03DA:  BCF    08.0
....................    lcd_rs_tris(); 
03DB:  BCF    08.1
....................    lcd_rw_tris(); 
03DC:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
03DD:  MOVLW  0F
03DE:  BCF    03.5
03DF:  MOVWF  53
03E0:  CALL   35E
....................    for(i=1;i<=3;++i) 
03E1:  MOVLW  01
03E2:  MOVWF  45
03E3:  MOVF   45,W
03E4:  SUBLW  03
03E5:  BTFSS  03.0
03E6:  GOTO   3EF
....................    { 
....................        lcd_send_nibble(3); 
03E7:  MOVLW  03
03E8:  MOVWF  5A
03E9:  CALL   372
....................        delay_ms(5); 
03EA:  MOVLW  05
03EB:  MOVWF  53
03EC:  CALL   35E
03ED:  INCF   45,F
03EE:  GOTO   3E3
....................    } 
....................     
....................    lcd_send_nibble(2); 
03EF:  MOVLW  02
03F0:  MOVWF  5A
03F1:  CALL   372
....................    delay_ms(5); 
03F2:  MOVLW  05
03F3:  MOVWF  53
03F4:  CALL   35E
....................    for(i=0;i<=3;++i) 
03F5:  CLRF   45
03F6:  MOVF   45,W
03F7:  SUBLW  03
03F8:  BTFSS  03.0
03F9:  GOTO   406
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
03FA:  MOVLW  46
03FB:  ADDWF  45,W
03FC:  MOVWF  04
03FD:  BCF    03.7
03FE:  MOVF   00,W
03FF:  MOVWF  4A
0400:  CLRF   57
0401:  MOVF   4A,W
0402:  MOVWF  58
0403:  CALL   389
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0404:  INCF   45,F
0405:  GOTO   3F6
0406:  BCF    0A.3
0407:  BCF    0A.4
0408:  GOTO   68D (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0439:  DECFSZ 54,W
043A:  GOTO   43C
043B:  GOTO   43F
....................       address=LCD_LINE_TWO; 
043C:  MOVLW  40
043D:  MOVWF  55
043E:  GOTO   440
....................    else 
....................       address=0; 
043F:  CLRF   55
....................       
....................    address+=x-1; 
0440:  MOVLW  01
0441:  SUBWF  53,W
0442:  ADDWF  55,F
....................    lcd_send_byte(0,0x80|address); 
0443:  MOVF   55,W
0444:  IORLW  80
0445:  MOVWF  56
0446:  CLRF   57
0447:  MOVF   56,W
0448:  MOVWF  58
0449:  CALL   389
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
044A:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
044B:  MOVF   52,W
044C:  XORLW  07
044D:  BTFSC  03.2
044E:  GOTO   459
044F:  XORLW  0B
0450:  BTFSC  03.2
0451:  GOTO   45E
0452:  XORLW  06
0453:  BTFSC  03.2
0454:  GOTO   466
0455:  XORLW  02
0456:  BTFSC  03.2
0457:  GOTO   46C
0458:  GOTO   471
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0459:  MOVLW  01
045A:  MOVWF  53
045B:  MOVWF  54
045C:  CALL   439
045D:  GOTO   476
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
045E:  CLRF   57
045F:  MOVLW  01
0460:  MOVWF  58
0461:  CALL   389
....................                      delay_ms(2); 
0462:  MOVLW  02
0463:  MOVWF  53
0464:  CALL   35E
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0465:  GOTO   476
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0466:  MOVLW  01
0467:  MOVWF  53
0468:  MOVLW  02
0469:  MOVWF  54
046A:  CALL   439
046B:  GOTO   476
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
046C:  CLRF   57
046D:  MOVLW  10
046E:  MOVWF  58
046F:  CALL   389
0470:  GOTO   476
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0471:  MOVLW  01
0472:  MOVWF  57
0473:  MOVF   52,W
0474:  MOVWF  58
0475:  CALL   389
....................      #endif 
....................    } 
0476:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
*
0409:  MOVF   45,F
040A:  BTFSC  03.2
040B:  GOTO   411
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
040C:  CLRF   57
040D:  MOVLW  0F
040E:  MOVWF  58
040F:  CALL   389
....................    } 
0410:  GOTO   415
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
0411:  CLRF   57
0412:  MOVLW  0C
0413:  MOVWF  58
0414:  CALL   389
....................    } 
0415:  BCF    0A.3
0416:  BCF    0A.4
0417:  GOTO   690 (RETURN)
.................... } 
....................  
.................... #endif 
....................  
....................  
....................   
....................  
.................... #DEFINE IN1 PIN_C3  
.................... #DEFINE IN2 PIN_C4  
....................  
....................   
....................  
.................... signed long pwmOut;  
.................... unsigned long int revAngle = 0;  
.................... float velo = 0.0f;  
.................... float t1 = 0;  
.................... float t2 = 0;  
.................... float deltaT = 0;  
.................... unsigned long int i = 0;  
....................  
....................   
....................  
.................... #int_ext  
.................... void external_interrupt()  
.................... {  
....................    revAngle++;  
*
00E8:  INCF   2E,F
00E9:  BTFSC  03.2
00EA:  INCF   2F,F
....................  t2 = i*0.512; // Caution here [1]  
00EB:  MOVF   41,W
00EC:  MOVWF  60
00ED:  MOVF   40,W
00EE:  MOVWF  5F
00EF:  CALL   056
00F0:  MOVF   7A,W
00F1:  MOVWF  62
00F2:  MOVF   79,W
00F3:  MOVWF  61
00F4:  MOVF   78,W
00F5:  MOVWF  60
00F6:  MOVF   77,W
00F7:  MOVWF  5F
00F8:  MOVLW  6F
00F9:  MOVWF  66
00FA:  MOVLW  12
00FB:  MOVWF  65
00FC:  MOVLW  03
00FD:  MOVWF  64
00FE:  MOVLW  7E
00FF:  MOVWF  63
0100:  CALL   073
0101:  MOVF   7A,W
0102:  MOVWF  3B
0103:  MOVF   79,W
0104:  MOVWF  3A
0105:  MOVF   78,W
0106:  MOVWF  39
0107:  MOVF   77,W
0108:  MOVWF  38
....................    deltaT = t2-t1;  
0109:  BSF    03.1
010A:  MOVF   3B,W
010B:  MOVWF  62
010C:  MOVF   3A,W
010D:  MOVWF  61
010E:  MOVF   39,W
010F:  MOVWF  60
0110:  MOVF   38,W
0111:  MOVWF  5F
0112:  MOVF   37,W
0113:  MOVWF  66
0114:  MOVF   36,W
0115:  MOVWF  65
0116:  MOVF   35,W
0117:  MOVWF  64
0118:  MOVF   34,W
0119:  MOVWF  63
*
025A:  MOVF   7A,W
025B:  MOVWF  3F
025C:  MOVF   79,W
025D:  MOVWF  3E
025E:  MOVF   78,W
025F:  MOVWF  3D
0260:  MOVF   77,W
0261:  MOVWF  3C
....................    velo = 166.667/deltaT;   // Caution here [2]  
0262:  MOVLW  C1
0263:  MOVWF  62
0264:  MOVLW  AA
0265:  MOVWF  61
0266:  MOVLW  26
0267:  MOVWF  60
0268:  MOVLW  86
0269:  MOVWF  5F
026A:  MOVF   3F,W
026B:  MOVWF  66
026C:  MOVF   3E,W
026D:  MOVWF  65
026E:  MOVF   3D,W
026F:  MOVWF  64
0270:  MOVF   3C,W
0271:  MOVWF  63
*
033B:  MOVF   7A,W
033C:  MOVWF  33
033D:  MOVF   79,W
033E:  MOVWF  32
033F:  MOVF   78,W
0340:  MOVWF  31
0341:  MOVF   77,W
0342:  MOVWF  30
....................    t1 = t2;  
0343:  MOVF   3B,W
0344:  MOVWF  37
0345:  MOVF   3A,W
0346:  MOVWF  36
0347:  MOVF   39,W
0348:  MOVWF  35
0349:  MOVF   38,W
034A:  MOVWF  34
.................... }  
....................  
....................   
....................  
034B:  BCF    0B.1
034C:  BCF    0A.3
034D:  BCF    0A.4
034E:  GOTO   02F
.................... #int_timer0  
.................... void tmr_int()  
.................... {  
....................    set_timer0(246);  
034F:  MOVLW  F6
0350:  MOVWF  01
....................    i++;       
0351:  INCF   40,F
0352:  BTFSC  03.2
0353:  INCF   41,F
0354:  BCF    0B.2
0355:  BCF    0A.3
0356:  BCF    0A.4
0357:  GOTO   02F
.................... }  
....................  
....................   
....................  
.................... void main()  
*
066A:  MOVF   03,W
066B:  ANDLW  1F
066C:  MOVWF  03
066D:  CLRF   2F
066E:  CLRF   2E
066F:  CLRF   33
0670:  CLRF   32
0671:  CLRF   31
0672:  CLRF   30
0673:  CLRF   37
0674:  CLRF   36
0675:  CLRF   35
0676:  CLRF   34
0677:  CLRF   3B
0678:  CLRF   3A
0679:  CLRF   39
067A:  CLRF   38
067B:  CLRF   3F
067C:  CLRF   3E
067D:  CLRF   3D
067E:  CLRF   3C
067F:  CLRF   41
0680:  CLRF   40
0681:  MOVLW  FF
0682:  MOVWF  42
0683:  BSF    03.5
0684:  BSF    1F.0
0685:  BSF    1F.1
0686:  BSF    1F.2
0687:  BCF    1F.3
0688:  MOVLW  07
0689:  MOVWF  1C
068A:  BCF    03.7
.................... {  
....................    lcd_init();  
068B:  BCF    03.5
068C:  GOTO   3CB
....................    lcd_cursor_on(TRUE);  
068D:  MOVLW  01
068E:  MOVWF  45
068F:  GOTO   409
....................    port_b_pullups(TRUE);  
0690:  BSF    03.5
0691:  BCF    01.7
....................    enable_interrupts(GLOBAL);  
0692:  MOVLW  C0
0693:  BCF    03.5
0694:  IORWF  0B,F
....................    clear_interrupt(int_ext);  
0695:  BCF    0B.1
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256);   
0696:  BSF    03.5
0697:  MOVF   01,W
0698:  ANDLW  C0
0699:  IORLW  07
069A:  MOVWF  01
....................    set_timer0(246);  
069B:  MOVLW  F6
069C:  BCF    03.5
069D:  MOVWF  01
....................    enable_interrupts(int_timer0);  
069E:  BSF    0B.5
....................    enable_interrupts(int_ext);  
069F:  BSF    0B.4
....................    setup_adc_ports(AN0_AN1_AN3); //A0 A1 A3 are configured for analog input pin  
06A0:  BSF    03.5
06A1:  BCF    1F.0
06A2:  BCF    1F.1
06A3:  BSF    1F.2
06A4:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); //enable ADC and set clock for ADC  
06A5:  BCF    1F.6
06A6:  BCF    03.5
06A7:  BCF    1F.6
06A8:  BSF    1F.7
06A9:  BSF    03.5
06AA:  BSF    1F.7
06AB:  BCF    03.5
06AC:  BSF    1F.0
....................    unsigned int16 result_1; //variable for A0 value  
....................    set_tris_c(0x00); //set all portb pins as output  
06AD:  MOVLW  00
06AE:  BSF    03.5
06AF:  MOVWF  07
06B0:  BCF    03.5
06B1:  MOVWF  42
....................    setup_ccp1(CCP_PWM); //4kHz PWM signal output at CCP1 pin 17  
06B2:  BCF    42.2
06B3:  MOVF   42,W
06B4:  BSF    03.5
06B5:  MOVWF  07
06B6:  BCF    03.5
06B7:  BCF    07.2
06B8:  MOVLW  0C
06B9:  MOVWF  17
....................      
....................    setup_timer_2(T2_DIV_BY_16, 255, 1);  
06BA:  MOVLW  00
06BB:  MOVWF  78
06BC:  IORLW  06
06BD:  MOVWF  12
06BE:  MOVLW  FF
06BF:  BSF    03.5
06C0:  MOVWF  12
....................    set_pwm2_duty(0);  
06C1:  BCF    03.5
06C2:  CLRF   1B
....................    output_low(IN1);  
06C3:  BCF    42.3
06C4:  MOVF   42,W
06C5:  BSF    03.5
06C6:  MOVWF  07
06C7:  BCF    03.5
06C8:  BCF    07.3
....................    output_high(IN2);  
06C9:  BCF    42.4
06CA:  MOVF   42,W
06CB:  BSF    03.5
06CC:  MOVWF  07
06CD:  BCF    03.5
06CE:  BSF    07.4
....................      
....................    while(TRUE)  
....................    {  
....................  set_adc_channel(0); // next analog reading will be from channel 0  
06CF:  MOVLW  00
06D0:  MOVWF  78
06D1:  MOVF   1F,W
06D2:  ANDLW  C7
06D3:  IORWF  78,W
06D4:  MOVWF  1F
....................  delay_us(10); //allow time after channel selection and reading  
06D5:  MOVLW  10
06D6:  MOVWF  77
06D7:  DECFSZ 77,F
06D8:  GOTO   6D7
06D9:  NOP
....................  result_1 = read_adc(); //start and read A/D  
06DA:  BSF    1F.2
06DB:  BTFSC  1F.2
06DC:  GOTO   6DB
06DD:  BSF    03.5
06DE:  MOVF   1E,W
06DF:  BCF    03.5
06E0:  MOVWF  43
06E1:  MOVF   1E,W
06E2:  MOVWF  44
....................  delay_us(10); //allow time after channel selection and reading  
06E3:  MOVLW  10
06E4:  MOVWF  77
06E5:  DECFSZ 77,F
06E6:  GOTO   6E5
06E7:  NOP
06E8:  CLRF   2B
06E9:  BTFSC  0B.7
06EA:  BSF    2B.7
06EB:  BCF    0B.7
....................  pwmOut = result_1*0.249; // mapping analog input to pwm output  
06EC:  MOVF   44,W
06ED:  MOVWF  60
06EE:  MOVF   43,W
06EF:  MOVWF  5F
06F0:  CALL   056
06F1:  BTFSC  2B.7
06F2:  BSF    0B.7
06F3:  CLRF   2B
06F4:  BTFSC  0B.7
06F5:  BSF    2B.7
06F6:  BCF    0B.7
06F7:  MOVF   7A,W
06F8:  MOVWF  62
06F9:  MOVF   79,W
06FA:  MOVWF  61
06FB:  MOVF   78,W
06FC:  MOVWF  60
06FD:  MOVF   77,W
06FE:  MOVWF  5F
06FF:  MOVLW  DB
0700:  MOVWF  66
0701:  MOVLW  F9
0702:  MOVWF  65
0703:  MOVLW  7E
0704:  MOVWF  64
0705:  MOVLW  7C
0706:  MOVWF  63
0707:  CALL   073
0708:  BTFSC  2B.7
0709:  BSF    0B.7
070A:  MOVF   7A,W
070B:  MOVWF  48
070C:  MOVF   79,W
070D:  MOVWF  47
070E:  MOVF   78,W
070F:  MOVWF  46
0710:  MOVF   77,W
0711:  MOVWF  45
0712:  GOTO   418
0713:  MOVF   79,W
0714:  MOVWF  2D
0715:  MOVF   78,W
0716:  MOVWF  2C
....................  set_pwm1_duty(pwmOut); //set pulse-width during which signal is high  
0717:  MOVF   2D,W
0718:  MOVWF  79
0719:  MOVF   2C,W
071A:  MOVWF  78
071B:  RRF    79,F
071C:  RRF    78,F
071D:  RRF    79,F
071E:  RRF    78,F
071F:  RRF    79,F
0720:  MOVF   78,W
0721:  MOVWF  15
0722:  RRF    79,F
0723:  RRF    79,W
0724:  ANDLW  30
0725:  MOVWF  77
0726:  MOVF   17,W
0727:  ANDLW  CF
0728:  IORWF  77,W
0729:  MOVWF  17
....................       printf(lcd_putc, "\fAngle:%lu\n",revAngle);  
072A:  MOVLW  58
072B:  BSF    03.6
072C:  MOVWF  0D
072D:  MOVLW  03
072E:  MOVWF  0F
072F:  BCF    03.0
0730:  MOVLW  07
0731:  BCF    03.6
0732:  MOVWF  45
0733:  GOTO   477
0734:  MOVLW  10
0735:  MOVWF  04
0736:  MOVF   2F,W
0737:  MOVWF  46
0738:  MOVF   2E,W
0739:  MOVWF  45
073A:  GOTO   4D0
073B:  MOVLW  0A
073C:  MOVWF  52
073D:  CALL   44B
....................       printf(lcd_putc, "dt:%f,w:%f\n",deltaT,velo);  
073E:  MOVLW  64
073F:  MOVWF  52
0740:  CALL   44B
0741:  MOVLW  74
0742:  MOVWF  52
0743:  CALL   44B
0744:  MOVLW  3A
0745:  MOVWF  52
0746:  CALL   44B
0747:  MOVLW  89
0748:  MOVWF  04
0749:  MOVF   3F,W
074A:  MOVWF  48
074B:  MOVF   3E,W
074C:  MOVWF  47
074D:  MOVF   3D,W
074E:  MOVWF  46
074F:  MOVF   3C,W
0750:  MOVWF  45
0751:  MOVLW  02
0752:  MOVWF  49
0753:  CALL   584
0754:  MOVLW  2C
0755:  MOVWF  52
0756:  CALL   44B
0757:  MOVLW  77
0758:  MOVWF  52
0759:  CALL   44B
075A:  MOVLW  3A
075B:  MOVWF  52
075C:  CALL   44B
075D:  MOVLW  89
075E:  MOVWF  04
075F:  MOVF   33,W
0760:  MOVWF  48
0761:  MOVF   32,W
0762:  MOVWF  47
0763:  MOVF   31,W
0764:  MOVWF  46
0765:  MOVF   30,W
0766:  MOVWF  45
0767:  MOVLW  02
0768:  MOVWF  49
0769:  CALL   584
076A:  MOVLW  0A
076B:  MOVWF  52
076C:  CALL   44B
....................       delay_ms(50);  
076D:  MOVLW  32
076E:  MOVWF  53
076F:  CALL   35E
0770:  GOTO   6CF
....................     }  
.................... }  
0771:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

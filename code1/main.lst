CCS PCM C Compiler, Version 5.015, 5967               18-May-23 17:39

               Filename:   C:\Users\Berke\Desktop\Yeni klasör (2)\main.lst

               ROM used:   1492 words (18%)
                           Largest free fragment is 2048
               RAM used:   29 (8%) at main() level
                           73 (20%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4F4
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   050
002B:  BTFSS  0B.5
002C:  GOTO   02F
002D:  BTFSC  0B.2
002E:  GOTO   053
002F:  MOVF   22,W
0030:  MOVWF  04
0031:  MOVF   23,W
0032:  MOVWF  77
0033:  MOVF   24,W
0034:  MOVWF  78
0035:  MOVF   25,W
0036:  MOVWF  79
0037:  MOVF   26,W
0038:  MOVWF  7A
0039:  MOVF   27,W
003A:  BSF    03.6
003B:  MOVWF  0D
003C:  BCF    03.6
003D:  MOVF   28,W
003E:  BSF    03.6
003F:  MOVWF  0F
0040:  BCF    03.6
0041:  MOVF   29,W
0042:  BSF    03.6
0043:  MOVWF  0C
0044:  BCF    03.6
0045:  MOVF   2A,W
0046:  BSF    03.6
0047:  MOVWF  0E
0048:  BCF    03.6
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   056
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   07A
.................... #include <16F877A.h>  
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
005D:  MOVLW  8E
005E:  MOVWF  77
005F:  MOVF   57,W
0060:  MOVWF  78
0061:  MOVF   56,W
0062:  MOVWF  79
0063:  CLRF   7A
0064:  MOVF   78,F
0065:  BTFSS  03.2
0066:  GOTO   071
0067:  MOVF   79,W
0068:  MOVWF  78
0069:  CLRF   79
006A:  MOVLW  08
006B:  SUBWF  77,F
006C:  MOVF   78,F
006D:  BTFSS  03.2
006E:  GOTO   071
006F:  CLRF   77
0070:  GOTO   079
0071:  BCF    03.0
0072:  BTFSC  78.7
0073:  GOTO   078
0074:  RLF    79,F
0075:  RLF    78,F
0076:  DECF   77,F
0077:  GOTO   071
0078:  BCF    78.7
0079:  RETURN
*
009D:  MOVF   56,W
009E:  BTFSC  03.2
009F:  GOTO   162
00A0:  MOVWF  62
00A1:  MOVF   5A,W
00A2:  BTFSC  03.2
00A3:  GOTO   162
00A4:  SUBWF  62,F
00A5:  BTFSS  03.0
00A6:  GOTO   0AC
00A7:  MOVLW  7F
00A8:  ADDWF  62,F
00A9:  BTFSC  03.0
00AA:  GOTO   162
00AB:  GOTO   0B2
00AC:  MOVLW  81
00AD:  SUBWF  62,F
00AE:  BTFSS  03.0
00AF:  GOTO   162
00B0:  BTFSC  03.2
00B1:  GOTO   162
00B2:  MOVF   62,W
00B3:  MOVWF  77
00B4:  CLRF   78
00B5:  CLRF   79
00B6:  CLRF   7A
00B7:  CLRF   61
00B8:  MOVF   57,W
00B9:  MOVWF  60
00BA:  BSF    60.7
00BB:  MOVF   58,W
00BC:  MOVWF  5F
00BD:  MOVF   59,W
00BE:  MOVWF  5E
00BF:  MOVLW  19
00C0:  MOVWF  62
00C1:  MOVF   5D,W
00C2:  SUBWF  5E,F
00C3:  BTFSC  03.0
00C4:  GOTO   0D5
00C5:  MOVLW  01
00C6:  SUBWF  5F,F
00C7:  BTFSC  03.0
00C8:  GOTO   0D5
00C9:  SUBWF  60,F
00CA:  BTFSC  03.0
00CB:  GOTO   0D5
00CC:  SUBWF  61,F
00CD:  BTFSC  03.0
00CE:  GOTO   0D5
00CF:  INCF   61,F
00D0:  INCF   60,F
00D1:  INCF   5F,F
00D2:  MOVF   5D,W
00D3:  ADDWF  5E,F
00D4:  GOTO   107
00D5:  MOVF   5C,W
00D6:  SUBWF  5F,F
00D7:  BTFSC  03.0
00D8:  GOTO   0F0
00D9:  MOVLW  01
00DA:  SUBWF  60,F
00DB:  BTFSC  03.0
00DC:  GOTO   0F0
00DD:  SUBWF  61,F
00DE:  BTFSC  03.0
00DF:  GOTO   0F0
00E0:  INCF   61,F
00E1:  INCF   60,F
00E2:  MOVF   5C,W
00E3:  ADDWF  5F,F
00E4:  MOVF   5D,W
00E5:  ADDWF  5E,F
00E6:  BTFSS  03.0
00E7:  GOTO   107
00E8:  INCF   5F,F
00E9:  BTFSS  03.2
00EA:  GOTO   107
00EB:  INCF   60,F
00EC:  BTFSS  03.2
00ED:  GOTO   107
00EE:  INCF   61,F
00EF:  GOTO   107
00F0:  MOVF   5B,W
00F1:  IORLW  80
00F2:  SUBWF  60,F
00F3:  BTFSC  03.0
00F4:  GOTO   106
00F5:  MOVLW  01
00F6:  SUBWF  61,F
00F7:  BTFSC  03.0
00F8:  GOTO   106
00F9:  INCF   61,F
00FA:  MOVF   5B,W
00FB:  IORLW  80
00FC:  ADDWF  60,F
00FD:  MOVF   5C,W
00FE:  ADDWF  5F,F
00FF:  BTFSS  03.0
0100:  GOTO   0E4
0101:  INCF   60,F
0102:  BTFSS  03.2
0103:  GOTO   0E4
0104:  INCF   61,F
0105:  GOTO   0E4
0106:  BSF    7A.0
0107:  DECFSZ 62,F
0108:  GOTO   10A
0109:  GOTO   115
010A:  BCF    03.0
010B:  RLF    5E,F
010C:  RLF    5F,F
010D:  RLF    60,F
010E:  RLF    61,F
010F:  BCF    03.0
0110:  RLF    7A,F
0111:  RLF    79,F
0112:  RLF    78,F
0113:  RLF    63,F
0114:  GOTO   0C1
0115:  BTFSS  63.0
0116:  GOTO   11D
0117:  BCF    03.0
0118:  RRF    78,F
0119:  RRF    79,F
011A:  RRF    7A,F
011B:  RRF    63,F
011C:  GOTO   120
011D:  DECF   77,F
011E:  BTFSC  03.2
011F:  GOTO   162
0120:  BTFSC  63.7
0121:  GOTO   149
0122:  BCF    03.0
0123:  RLF    5E,F
0124:  RLF    5F,F
0125:  RLF    60,F
0126:  RLF    61,F
0127:  MOVF   5D,W
0128:  SUBWF  5E,F
0129:  BTFSC  03.0
012A:  GOTO   135
012B:  MOVLW  01
012C:  SUBWF  5F,F
012D:  BTFSC  03.0
012E:  GOTO   135
012F:  SUBWF  60,F
0130:  BTFSC  03.0
0131:  GOTO   135
0132:  SUBWF  61,F
0133:  BTFSS  03.0
0134:  GOTO   158
0135:  MOVF   5C,W
0136:  SUBWF  5F,F
0137:  BTFSC  03.0
0138:  GOTO   140
0139:  MOVLW  01
013A:  SUBWF  60,F
013B:  BTFSC  03.0
013C:  GOTO   140
013D:  SUBWF  61,F
013E:  BTFSS  03.0
013F:  GOTO   158
0140:  MOVF   5B,W
0141:  IORLW  80
0142:  SUBWF  60,F
0143:  BTFSC  03.0
0144:  GOTO   149
0145:  MOVLW  01
0146:  SUBWF  61,F
0147:  BTFSS  03.0
0148:  GOTO   158
0149:  INCF   7A,F
014A:  BTFSS  03.2
014B:  GOTO   158
014C:  INCF   79,F
014D:  BTFSS  03.2
014E:  GOTO   158
014F:  INCF   78,F
0150:  BTFSS  03.2
0151:  GOTO   158
0152:  INCF   77,F
0153:  BTFSC  03.2
0154:  GOTO   162
0155:  RRF    78,F
0156:  RRF    79,F
0157:  RRF    7A,F
0158:  MOVF   57,W
0159:  MOVWF  62
015A:  MOVF   5B,W
015B:  XORWF  62,F
015C:  BTFSS  62.7
015D:  GOTO   160
015E:  BSF    78.7
015F:  GOTO   166
0160:  BCF    78.7
0161:  GOTO   166
0162:  CLRF   77
0163:  CLRF   78
0164:  CLRF   79
0165:  CLRF   7A
*
0177:  DATA 8C,20
0178:  DATA EE,33
0179:  DATA EC,32
017A:  DATA BA,12
017B:  DATA EC,3A
017C:  DATA 0A,00
*
0231:  MOVF   47,W
0232:  BTFSC  03.2
0233:  GOTO   2A1
0234:  MOVWF  4F
0235:  MOVF   4B,W
0236:  BTFSC  03.2
0237:  GOTO   2A1
0238:  ADDWF  4F,F
0239:  BTFSC  03.0
023A:  GOTO   242
023B:  MOVLW  7F
023C:  SUBWF  4F,F
023D:  BTFSS  03.0
023E:  GOTO   2A1
023F:  BTFSC  03.2
0240:  GOTO   2A1
0241:  GOTO   246
0242:  MOVLW  81
0243:  ADDWF  4F,F
0244:  BTFSC  03.0
0245:  GOTO   2A1
0246:  MOVF   4F,W
0247:  MOVWF  77
0248:  CLRF   78
0249:  CLRF   79
024A:  CLRF   7A
024B:  MOVF   48,W
024C:  MOVWF  53
024D:  BSF    53.7
024E:  MOVF   49,W
024F:  MOVWF  52
0250:  MOVF   4A,W
0251:  MOVWF  51
0252:  MOVLW  18
0253:  MOVWF  4F
0254:  CLRF   50
0255:  BTFSS  51.0
0256:  GOTO   26F
0257:  MOVF   4E,W
0258:  ADDWF  7A,F
0259:  BTFSS  03.0
025A:  GOTO   261
025B:  INCF   79,F
025C:  BTFSS  03.2
025D:  GOTO   261
025E:  INCF   78,F
025F:  BTFSC  03.2
0260:  BSF    50.7
0261:  MOVF   4D,W
0262:  ADDWF  79,F
0263:  BTFSS  03.0
0264:  GOTO   268
0265:  INCF   78,F
0266:  BTFSC  03.2
0267:  BSF    50.7
0268:  MOVF   4C,W
0269:  MOVWF  49
026A:  BSF    49.7
026B:  MOVF   49,W
026C:  ADDWF  78,F
026D:  BTFSC  03.0
026E:  BSF    50.7
026F:  RLF    50,F
0270:  RRF    78,F
0271:  RRF    79,F
0272:  RRF    7A,F
0273:  RRF    53,F
0274:  RRF    52,F
0275:  RRF    51,F
0276:  BCF    03.0
0277:  DECFSZ 4F,F
0278:  GOTO   254
0279:  MOVLW  01
027A:  ADDWF  77,F
027B:  BTFSC  03.0
027C:  GOTO   2A1
027D:  BTFSC  78.7
027E:  GOTO   286
027F:  RLF    53,F
0280:  RLF    7A,F
0281:  RLF    79,F
0282:  RLF    78,F
0283:  DECF   77,F
0284:  BTFSC  03.2
0285:  GOTO   2A1
0286:  BTFSS  53.7
0287:  GOTO   297
0288:  INCF   7A,F
0289:  BTFSS  03.2
028A:  GOTO   297
028B:  INCF   79,F
028C:  BTFSS  03.2
028D:  GOTO   297
028E:  INCF   78,F
028F:  BTFSS  03.2
0290:  GOTO   297
0291:  RRF    78,F
0292:  RRF    79,F
0293:  RRF    7A,F
0294:  INCF   77,F
0295:  BTFSC  03.2
0296:  GOTO   2A1
0297:  MOVF   48,W
0298:  MOVWF  50
0299:  MOVF   4C,W
029A:  XORWF  50,F
029B:  BTFSS  50.7
029C:  GOTO   29F
029D:  BSF    78.7
029E:  GOTO   2A5
029F:  BCF    78.7
02A0:  GOTO   2A5
02A1:  CLRF   77
02A2:  CLRF   78
02A3:  CLRF   79
02A4:  CLRF   7A
02A5:  RETURN
02A6:  MOVLW  8E
02A7:  MOVWF  77
02A8:  MOVF   3A,W
02A9:  SUBWF  77,F
02AA:  MOVF   3B,W
02AB:  MOVWF  79
02AC:  MOVF   3C,W
02AD:  MOVWF  78
02AE:  BSF    79.7
02AF:  MOVF   77,F
02B0:  BTFSC  03.2
02B1:  GOTO   2BD
02B2:  BCF    03.0
02B3:  MOVF   79,F
02B4:  BTFSS  03.2
02B5:  GOTO   2B9
02B6:  MOVF   78,F
02B7:  BTFSC  03.2
02B8:  GOTO   2BD
02B9:  RRF    79,F
02BA:  RRF    78,F
02BB:  DECFSZ 77,F
02BC:  GOTO   2B2
02BD:  BTFSS  3B.7
02BE:  GOTO   2C4
02BF:  COMF   78,F
02C0:  COMF   79,F
02C1:  INCF   78,F
02C2:  BTFSC  03.2
02C3:  INCF   79,F
02C4:  BCF    0A.3
02C5:  BCF    0A.4
02C6:  GOTO   58E (RETURN)
*
0305:  MOVF   0B,W
0306:  MOVWF  3B
0307:  BCF    0B.7
0308:  BSF    03.5
0309:  BSF    03.6
030A:  BSF    0C.7
030B:  BSF    0C.0
030C:  NOP
030D:  NOP
030E:  BCF    03.5
030F:  BCF    03.6
0310:  BTFSC  3B.7
0311:  BSF    0B.7
0312:  BTFSC  03.0
0313:  GOTO   33C
0314:  BSF    03.6
0315:  MOVF   0C,W
0316:  ANDLW  7F
0317:  BCF    03.6
0318:  MOVWF  3B
0319:  BSF    03.6
031A:  MOVF   0D,W
031B:  BCF    03.6
031C:  MOVWF  3C
031D:  BSF    03.6
031E:  MOVF   0F,W
031F:  BCF    03.6
0320:  MOVWF  3D
0321:  MOVF   3B,W
0322:  MOVWF  47
0323:  CALL   2D9
0324:  MOVF   3C,W
0325:  BSF    03.6
0326:  MOVWF  0D
0327:  BCF    03.6
0328:  MOVF   3D,W
0329:  BSF    03.6
032A:  MOVWF  0F
032B:  BCF    03.6
032C:  MOVF   0B,W
032D:  MOVWF  3E
032E:  BCF    0B.7
032F:  BSF    03.5
0330:  BSF    03.6
0331:  BSF    0C.7
0332:  BSF    0C.0
0333:  NOP
0334:  NOP
0335:  BCF    03.5
0336:  BCF    03.6
0337:  BTFSC  3E.7
0338:  BSF    0B.7
0339:  DECFSZ 3A,F
033A:  GOTO   33C
033B:  GOTO   35B
033C:  BSF    03.6
033D:  RLF    0C,W
033E:  RLF    0E,W
033F:  ANDLW  7F
0340:  BCF    03.6
0341:  MOVWF  3B
0342:  BSF    03.6
0343:  MOVF   0D,W
0344:  BCF    03.6
0345:  MOVWF  3C
0346:  BSF    03.6
0347:  MOVF   0F,W
0348:  BCF    03.6
0349:  MOVWF  3D
034A:  MOVF   3B,W
034B:  MOVWF  47
034C:  CALL   2D9
034D:  MOVF   3C,W
034E:  BSF    03.6
034F:  MOVWF  0D
0350:  BCF    03.6
0351:  MOVF   3D,W
0352:  BSF    03.6
0353:  MOVWF  0F
0354:  INCF   0D,F
0355:  BTFSC  03.2
0356:  INCF   0F,F
0357:  BCF    03.0
0358:  BCF    03.6
0359:  DECFSZ 3A,F
035A:  GOTO   305
035B:  BCF    0A.3
035C:  BCF    0A.4
035D:  GOTO   5AF (RETURN)
035E:  CLRF   42
035F:  MOVF   04,W
0360:  MOVWF  41
0361:  BCF    42.0
0362:  BTFSC  03.7
0363:  BSF    42.0
0364:  SWAPF  3B,W
0365:  IORLW  F0
0366:  MOVWF  3D
0367:  ADDWF  3D,F
0368:  ADDLW  E2
0369:  MOVWF  3E
036A:  ADDLW  32
036B:  MOVWF  40
036C:  MOVF   3B,W
036D:  ANDLW  0F
036E:  ADDWF  3E,F
036F:  ADDWF  3E,F
0370:  ADDWF  40,F
0371:  ADDLW  E9
0372:  MOVWF  3F
0373:  ADDWF  3F,F
0374:  ADDWF  3F,F
0375:  SWAPF  3A,W
0376:  ANDLW  0F
0377:  ADDWF  3F,F
0378:  ADDWF  40,F
0379:  RLF    3F,F
037A:  RLF    40,F
037B:  COMF   40,F
037C:  RLF    40,F
037D:  MOVF   3A,W
037E:  ANDLW  0F
037F:  ADDWF  40,F
0380:  RLF    3D,F
0381:  MOVLW  07
0382:  MOVWF  3C
0383:  MOVLW  0A
0384:  ADDWF  40,F
0385:  DECF   3F,F
0386:  BTFSS  03.0
0387:  GOTO   384
0388:  ADDWF  3F,F
0389:  DECF   3E,F
038A:  BTFSS  03.0
038B:  GOTO   388
038C:  ADDWF  3E,F
038D:  DECF   3D,F
038E:  BTFSS  03.0
038F:  GOTO   38C
0390:  ADDWF  3D,F
0391:  DECF   3C,F
0392:  BTFSS  03.0
0393:  GOTO   390
0394:  MOVLW  3C
0395:  MOVWF  04
0396:  BCF    03.7
0397:  MOVLW  07
0398:  ANDWF  41,W
0399:  BCF    41.6
039A:  ADDWF  04,F
039B:  MOVLW  40
039C:  SUBWF  04,W
039D:  BTFSC  03.2
039E:  BSF    41.6
039F:  MOVF   00,W
03A0:  MOVWF  77
03A1:  BTFSS  03.2
03A2:  GOTO   3AB
03A3:  BTFSC  41.6
03A4:  GOTO   3AB
03A5:  BTFSC  41.4
03A6:  GOTO   3BD
03A7:  BTFSC  41.3
03A8:  GOTO   3AB
03A9:  MOVLW  20
03AA:  GOTO   3AE
03AB:  BSF    41.3
03AC:  BCF    41.4
03AD:  MOVLW  30
03AE:  ADDWF  77,F
03AF:  CLRF   3B
03B0:  MOVF   04,W
03B1:  MOVWF  3A
03B2:  BCF    3B.0
03B3:  BTFSC  03.7
03B4:  BSF    3B.0
03B5:  MOVF   77,W
03B6:  MOVWF  47
03B7:  CALL   2D9
03B8:  MOVF   3A,W
03B9:  MOVWF  04
03BA:  BCF    03.7
03BB:  BTFSC  3B.0
03BC:  BSF    03.7
03BD:  INCF   04,F
03BE:  BTFSS  41.6
03BF:  GOTO   39B
03C0:  BCF    0A.3
03C1:  BCF    0A.4
03C2:  GOTO   5B6 (RETURN)
03C3:  BTFSC  03.1
03C4:  GOTO   3C8
03C5:  MOVLW  4F
03C6:  MOVWF  04
03C7:  BCF    03.7
03C8:  CLRF   77
03C9:  CLRF   78
03CA:  CLRF   79
03CB:  CLRF   7A
03CC:  CLRF   4F
03CD:  CLRF   50
03CE:  CLRF   51
03CF:  CLRF   52
03D0:  MOVF   4E,W
03D1:  IORWF  4D,W
03D2:  IORWF  4C,W
03D3:  IORWF  4B,W
03D4:  BTFSC  03.2
03D5:  GOTO   406
03D6:  MOVLW  20
03D7:  MOVWF  53
03D8:  BCF    03.0
03D9:  RLF    47,F
03DA:  RLF    48,F
03DB:  RLF    49,F
03DC:  RLF    4A,F
03DD:  RLF    4F,F
03DE:  RLF    50,F
03DF:  RLF    51,F
03E0:  RLF    52,F
03E1:  MOVF   4E,W
03E2:  SUBWF  52,W
03E3:  BTFSS  03.2
03E4:  GOTO   3EF
03E5:  MOVF   4D,W
03E6:  SUBWF  51,W
03E7:  BTFSS  03.2
03E8:  GOTO   3EF
03E9:  MOVF   4C,W
03EA:  SUBWF  50,W
03EB:  BTFSS  03.2
03EC:  GOTO   3EF
03ED:  MOVF   4B,W
03EE:  SUBWF  4F,W
03EF:  BTFSS  03.0
03F0:  GOTO   400
03F1:  MOVF   4B,W
03F2:  SUBWF  4F,F
03F3:  MOVF   4C,W
03F4:  BTFSS  03.0
03F5:  INCFSZ 4C,W
03F6:  SUBWF  50,F
03F7:  MOVF   4D,W
03F8:  BTFSS  03.0
03F9:  INCFSZ 4D,W
03FA:  SUBWF  51,F
03FB:  MOVF   4E,W
03FC:  BTFSS  03.0
03FD:  INCFSZ 4E,W
03FE:  SUBWF  52,F
03FF:  BSF    03.0
0400:  RLF    77,F
0401:  RLF    78,F
0402:  RLF    79,F
0403:  RLF    7A,F
0404:  DECFSZ 53,F
0405:  GOTO   3D8
0406:  MOVF   4F,W
0407:  MOVWF  00
0408:  INCF   04,F
0409:  MOVF   50,W
040A:  MOVWF  00
040B:  INCF   04,F
040C:  MOVF   51,W
040D:  MOVWF  00
040E:  INCF   04,F
040F:  MOVF   52,W
0410:  MOVWF  00
0411:  RETURN
0412:  MOVF   04,W
0413:  MOVWF  3F
0414:  MOVF   3E,W
0415:  MOVWF  41
0416:  BTFSC  03.2
0417:  GOTO   431
0418:  MOVF   3D,W
0419:  MOVWF  4A
041A:  MOVF   3C,W
041B:  MOVWF  49
041C:  MOVF   3B,W
041D:  MOVWF  48
041E:  MOVF   3A,W
041F:  MOVWF  47
0420:  CLRF   4E
0421:  CLRF   4D
0422:  MOVLW  20
0423:  MOVWF  4C
0424:  MOVLW  82
0425:  MOVWF  4B
0426:  CALL   231
0427:  MOVF   7A,W
0428:  MOVWF  3D
0429:  MOVF   79,W
042A:  MOVWF  3C
042B:  MOVF   78,W
042C:  MOVWF  3B
042D:  MOVF   77,W
042E:  MOVWF  3A
042F:  DECFSZ 41,F
0430:  GOTO   418
0431:  MOVF   3D,W
0432:  MOVWF  4A
0433:  MOVF   3C,W
0434:  MOVWF  49
0435:  MOVF   3B,W
0436:  MOVWF  48
0437:  MOVF   3A,W
0438:  MOVWF  47
0439:  MOVF   47,W
043A:  SUBLW  B6
043B:  MOVWF  47
043C:  CLRF   7A
043D:  MOVF   48,W
043E:  MOVWF  4B
043F:  BSF    48.7
0440:  BCF    03.0
0441:  RRF    48,F
0442:  RRF    49,F
0443:  RRF    4A,F
0444:  RRF    7A,F
0445:  RRF    79,F
0446:  RRF    78,F
0447:  RRF    77,F
0448:  DECFSZ 47,F
0449:  GOTO   440
044A:  BTFSS  4B.7
044B:  GOTO   457
044C:  COMF   77,F
044D:  COMF   78,F
044E:  COMF   79,F
044F:  COMF   7A,F
0450:  INCF   77,F
0451:  BTFSC  03.2
0452:  INCF   78,F
0453:  BTFSC  03.2
0454:  INCF   79,F
0455:  BTFSC  03.2
0456:  INCF   7A,F
0457:  MOVF   7A,W
0458:  MOVWF  3D
0459:  MOVF   79,W
045A:  MOVWF  3C
045B:  MOVF   78,W
045C:  MOVWF  3B
045D:  MOVF   77,W
045E:  MOVWF  3A
045F:  BTFSS  3D.7
0460:  GOTO   46E
0461:  DECF   3F,F
0462:  BSF    3F.5
0463:  COMF   3A,F
0464:  COMF   3B,F
0465:  COMF   3C,F
0466:  COMF   3D,F
0467:  INCF   3A,F
0468:  BTFSC  03.2
0469:  INCF   3B,F
046A:  BTFSC  03.2
046B:  INCF   3C,F
046C:  BTFSC  03.2
046D:  INCF   3D,F
046E:  MOVLW  3B
046F:  MOVWF  46
0470:  MOVLW  9A
0471:  MOVWF  45
0472:  MOVLW  CA
0473:  MOVWF  44
0474:  CLRF   43
0475:  MOVLW  0A
0476:  MOVWF  41
0477:  MOVF   3E,W
0478:  BTFSC  03.2
0479:  INCF   3F,F
047A:  BSF    03.1
047B:  MOVLW  3A
047C:  MOVWF  04
047D:  BCF    03.7
047E:  MOVF   3D,W
047F:  MOVWF  4A
0480:  MOVF   3C,W
0481:  MOVWF  49
0482:  MOVF   3B,W
0483:  MOVWF  48
0484:  MOVF   3A,W
0485:  MOVWF  47
0486:  MOVF   46,W
0487:  MOVWF  4E
0488:  MOVF   45,W
0489:  MOVWF  4D
048A:  MOVF   44,W
048B:  MOVWF  4C
048C:  MOVF   43,W
048D:  MOVWF  4B
048E:  CALL   3C3
048F:  MOVF   78,W
0490:  MOVF   77,F
0491:  BTFSS  03.2
0492:  GOTO   4A6
0493:  INCF   3E,W
0494:  SUBWF  41,W
0495:  BTFSC  03.2
0496:  GOTO   4A6
0497:  MOVF   3F,W
0498:  BTFSC  03.2
0499:  GOTO   4A8
049A:  ANDLW  0F
049B:  SUBWF  41,W
049C:  BTFSC  03.2
049D:  GOTO   4A0
049E:  BTFSC  03.0
049F:  GOTO   4D8
04A0:  BTFSC  3F.7
04A1:  GOTO   4D8
04A2:  BTFSC  3F.6
04A3:  GOTO   4A8
04A4:  MOVLW  20
04A5:  GOTO   4D4
04A6:  MOVLW  20
04A7:  ANDWF  3F,F
04A8:  BTFSS  3F.5
04A9:  GOTO   4B6
04AA:  BCF    3F.5
04AB:  MOVF   3E,W
04AC:  BTFSS  03.2
04AD:  DECF   3F,F
04AE:  MOVF   77,W
04AF:  MOVWF  3F
04B0:  MOVLW  2D
04B1:  MOVWF  47
04B2:  CALL   2D9
04B3:  MOVF   3F,W
04B4:  MOVWF  77
04B5:  CLRF   3F
04B6:  MOVF   3E,W
04B7:  SUBWF  41,W
04B8:  BTFSS  03.2
04B9:  GOTO   4C4
04BA:  MOVF   77,W
04BB:  MOVWF  3F
04BC:  MOVLW  2E
04BD:  MOVWF  47
04BE:  CALL   2D9
04BF:  MOVF   3F,W
04C0:  MOVWF  77
04C1:  MOVLW  20
04C2:  ANDWF  3F,F
04C3:  MOVLW  00
04C4:  MOVLW  30
04C5:  BTFSS  3F.5
04C6:  GOTO   4D4
04C7:  BCF    3F.5
04C8:  MOVF   3E,W
04C9:  BTFSS  03.2
04CA:  DECF   3F,F
04CB:  MOVF   77,W
04CC:  MOVWF  3F
04CD:  MOVLW  2D
04CE:  MOVWF  47
04CF:  CALL   2D9
04D0:  MOVF   3F,W
04D1:  MOVWF  77
04D2:  CLRF   3F
04D3:  MOVLW  30
04D4:  ADDWF  77,F
04D5:  MOVF   77,W
04D6:  MOVWF  47
04D7:  CALL   2D9
04D8:  BCF    03.1
04D9:  MOVF   46,W
04DA:  MOVWF  4A
04DB:  MOVF   45,W
04DC:  MOVWF  49
04DD:  MOVF   44,W
04DE:  MOVWF  48
04DF:  MOVF   43,W
04E0:  MOVWF  47
04E1:  CLRF   4E
04E2:  CLRF   4D
04E3:  CLRF   4C
04E4:  MOVLW  0A
04E5:  MOVWF  4B
04E6:  CALL   3C3
04E7:  MOVF   7A,W
04E8:  MOVWF  46
04E9:  MOVF   79,W
04EA:  MOVWF  45
04EB:  MOVF   78,W
04EC:  MOVWF  44
04ED:  MOVF   77,W
04EE:  MOVWF  43
04EF:  DECFSZ 41,F
04F0:  GOTO   47A
04F1:  BCF    0A.3
04F2:  BCF    0A.4
04F3:  GOTO   5CC (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10  
.................... #FUSES NOWDT                    //No Watch Dog Timer  
.................... #FUSES NOBROWNOUT               //No brownout reset  
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O  
....................  
....................   
....................  
.................... #use delay(crystal=4000000)  
*
017D:  MOVLW  48
017E:  MOVWF  04
017F:  BCF    03.7
0180:  MOVF   00,W
0181:  BTFSC  03.2
0182:  GOTO   191
0183:  MOVLW  01
0184:  MOVWF  78
0185:  CLRF   77
0186:  DECFSZ 77,F
0187:  GOTO   186
0188:  DECFSZ 78,F
0189:  GOTO   185
018A:  MOVLW  4A
018B:  MOVWF  77
018C:  DECFSZ 77,F
018D:  GOTO   18C
018E:  GOTO   18F
018F:  DECFSZ 00,F
0190:  GOTO   183
0191:  RETURN
.................... #include <lcd.c>  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
01AA:  MOVLW  0F
01AB:  BSF    03.5
01AC:  ANDWF  08,W
01AD:  IORLW  F0
01AE:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
01AF:  BCF    03.5
01B0:  BSF    08.2
....................    delay_cycles(1); 
01B1:  NOP
....................    lcd_output_enable(1); 
01B2:  BSF    08.0
....................    delay_cycles(1); 
01B3:  NOP
....................    high = lcd_read_nibble(); 
01B4:  CALL   19E
01B5:  MOVF   78,W
01B6:  MOVWF  4F
....................        
....................    lcd_output_enable(0); 
01B7:  BCF    08.0
....................    delay_cycles(1); 
01B8:  NOP
....................    lcd_output_enable(1); 
01B9:  BSF    08.0
....................    delay_us(1); 
01BA:  NOP
....................    low = lcd_read_nibble(); 
01BB:  CALL   19E
01BC:  MOVF   78,W
01BD:  MOVWF  4E
....................        
....................    lcd_output_enable(0); 
01BE:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01BF:  MOVLW  0F
01C0:  BSF    03.5
01C1:  ANDWF  08,W
01C2:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
01C3:  BCF    03.5
01C4:  SWAPF  4F,W
01C5:  MOVWF  77
01C6:  MOVLW  F0
01C7:  ANDWF  77,F
01C8:  MOVF   77,W
01C9:  IORWF  4E,W
01CA:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
019E:  MOVF   08,W
019F:  MOVWF  77
01A0:  SWAPF  08,W
01A1:  ANDLW  0F
01A2:  MOVWF  78
....................   #endif 
01A3:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0192:  SWAPF  4F,W
0193:  ANDLW  F0
0194:  MOVWF  77
0195:  MOVLW  0F
0196:  ANDWF  08,W
0197:  IORWF  77,W
0198:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0199:  NOP
....................    lcd_output_enable(1); 
019A:  BSF    08.0
....................    delay_us(2); 
019B:  GOTO   19C
....................    lcd_output_enable(0); 
019C:  BCF    08.0
019D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
01A4:  BSF    03.5
01A5:  BCF    08.0
....................    lcd_rs_tris(); 
01A6:  BCF    08.1
....................    lcd_rw_tris(); 
01A7:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
01A8:  BCF    03.5
01A9:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
01CB:  MOVF   78,W
01CC:  MOVWF  4E
01CD:  BTFSC  4E.7
01CE:  GOTO   1AA
....................    lcd_output_rs(address); 
01CF:  BTFSS  4C.0
01D0:  BCF    08.1
01D1:  BTFSC  4C.0
01D2:  BSF    08.1
....................    delay_cycles(1); 
01D3:  NOP
....................    lcd_output_rw(0); 
01D4:  BCF    08.2
....................    delay_cycles(1); 
01D5:  NOP
....................    lcd_output_enable(0); 
01D6:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
01D7:  SWAPF  4D,W
01D8:  MOVWF  4E
01D9:  MOVLW  0F
01DA:  ANDWF  4E,F
01DB:  MOVF   4E,W
01DC:  MOVWF  4F
01DD:  CALL   192
....................    lcd_send_nibble(n & 0xf); 
01DE:  MOVF   4D,W
01DF:  ANDLW  0F
01E0:  MOVWF  4E
01E1:  MOVWF  4F
01E2:  CALL   192
01E3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01E4:  MOVLW  28
01E5:  MOVWF  3B
01E6:  MOVLW  0C
01E7:  MOVWF  3C
01E8:  MOVLW  01
01E9:  MOVWF  3D
01EA:  MOVLW  06
01EB:  MOVWF  3E
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01EC:  BCF    08.0
....................    lcd_output_rs(0); 
01ED:  BCF    08.1
....................    lcd_output_rw(0); 
01EE:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01EF:  MOVLW  0F
01F0:  BSF    03.5
01F1:  ANDWF  08,W
01F2:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
01F3:  BCF    08.0
....................    lcd_rs_tris(); 
01F4:  BCF    08.1
....................    lcd_rw_tris(); 
01F5:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
01F6:  MOVLW  0F
01F7:  BCF    03.5
01F8:  MOVWF  48
01F9:  CALL   17D
....................    for(i=1;i<=3;++i) 
01FA:  MOVLW  01
01FB:  MOVWF  3A
01FC:  MOVF   3A,W
01FD:  SUBLW  03
01FE:  BTFSS  03.0
01FF:  GOTO   208
....................    { 
....................        lcd_send_nibble(3); 
0200:  MOVLW  03
0201:  MOVWF  4F
0202:  CALL   192
....................        delay_ms(5); 
0203:  MOVLW  05
0204:  MOVWF  48
0205:  CALL   17D
0206:  INCF   3A,F
0207:  GOTO   1FC
....................    } 
....................     
....................    lcd_send_nibble(2); 
0208:  MOVLW  02
0209:  MOVWF  4F
020A:  CALL   192
....................    delay_ms(5); 
020B:  MOVLW  05
020C:  MOVWF  48
020D:  CALL   17D
....................    for(i=0;i<=3;++i) 
020E:  CLRF   3A
020F:  MOVF   3A,W
0210:  SUBLW  03
0211:  BTFSS  03.0
0212:  GOTO   21F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0213:  MOVLW  3B
0214:  ADDWF  3A,W
0215:  MOVWF  04
0216:  BCF    03.7
0217:  MOVF   00,W
0218:  MOVWF  3F
0219:  CLRF   4C
021A:  MOVF   3F,W
021B:  MOVWF  4D
021C:  CALL   1A4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
021D:  INCF   3A,F
021E:  GOTO   20F
021F:  BCF    0A.3
0220:  BCF    0A.4
0221:  GOTO   50C (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
02C7:  DECFSZ 49,W
02C8:  GOTO   2CA
02C9:  GOTO   2CD
....................       address=LCD_LINE_TWO; 
02CA:  MOVLW  40
02CB:  MOVWF  4A
02CC:  GOTO   2CE
....................    else 
....................       address=0; 
02CD:  CLRF   4A
....................       
....................    address+=x-1; 
02CE:  MOVLW  01
02CF:  SUBWF  48,W
02D0:  ADDWF  4A,F
....................    lcd_send_byte(0,0x80|address); 
02D1:  MOVF   4A,W
02D2:  IORLW  80
02D3:  MOVWF  4B
02D4:  CLRF   4C
02D5:  MOVF   4B,W
02D6:  MOVWF  4D
02D7:  CALL   1A4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02D8:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
02D9:  MOVF   47,W
02DA:  XORLW  07
02DB:  BTFSC  03.2
02DC:  GOTO   2E7
02DD:  XORLW  0B
02DE:  BTFSC  03.2
02DF:  GOTO   2EC
02E0:  XORLW  06
02E1:  BTFSC  03.2
02E2:  GOTO   2F4
02E3:  XORLW  02
02E4:  BTFSC  03.2
02E5:  GOTO   2FA
02E6:  GOTO   2FF
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02E7:  MOVLW  01
02E8:  MOVWF  48
02E9:  MOVWF  49
02EA:  CALL   2C7
02EB:  GOTO   304
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02EC:  CLRF   4C
02ED:  MOVLW  01
02EE:  MOVWF  4D
02EF:  CALL   1A4
....................                      delay_ms(2); 
02F0:  MOVLW  02
02F1:  MOVWF  48
02F2:  CALL   17D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02F3:  GOTO   304
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02F4:  MOVLW  01
02F5:  MOVWF  48
02F6:  MOVLW  02
02F7:  MOVWF  49
02F8:  CALL   2C7
02F9:  GOTO   304
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02FA:  CLRF   4C
02FB:  MOVLW  10
02FC:  MOVWF  4D
02FD:  CALL   1A4
02FE:  GOTO   304
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02FF:  MOVLW  01
0300:  MOVWF  4C
0301:  MOVF   47,W
0302:  MOVWF  4D
0303:  CALL   1A4
....................      #endif 
....................    } 
0304:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
*
0222:  MOVF   3A,F
0223:  BTFSC  03.2
0224:  GOTO   22A
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
0225:  CLRF   4C
0226:  MOVLW  0F
0227:  MOVWF  4D
0228:  CALL   1A4
....................    } 
0229:  GOTO   22E
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
022A:  CLRF   4C
022B:  MOVLW  0C
022C:  MOVWF  4D
022D:  CALL   1A4
....................    } 
022E:  BCF    0A.3
022F:  BCF    0A.4
0230:  GOTO   50F (RETURN)
.................... } 
....................  
.................... #endif 
....................  
....................  
....................   
....................  
.................... #DEFINE IN1 PIN_C3  
.................... #DEFINE IN2 PIN_C4  
....................  
....................   
....................  
.................... unsigned long int revAngle = 0.0f;  
.................... unsigned long int prevAngle = 0.0f;  
.................... signed long pwmOut;  
.................... float dx_dt = 0;  
.................... int i = 0;  
....................  
....................   
....................  
.................... #int_ext  
.................... void external_interrupt()  
.................... {  
....................    revAngle++;  
*
0056:  INCF   2C,F
0057:  BTFSC  03.2
0058:  INCF   2D,F
.................... }  
....................  
....................   
....................  
0059:  BCF    0B.1
005A:  BCF    0A.3
005B:  BCF    0A.4
005C:  GOTO   02F
.................... #int_timer0  
.................... void tmr_int()  
.................... {  
....................    set_timer0(60);  
*
007A:  MOVLW  3C
007B:  MOVWF  01
....................    i++;       
007C:  INCF   36,F
....................    if (i==10)  
007D:  MOVF   36,W
007E:  SUBLW  0A
007F:  BTFSS  03.2
0080:  GOTO   173
....................    {  
....................       dx_dt = (revAngle - prevAngle)/3.0f;    // Caution here  
0081:  MOVF   2E,W
0082:  SUBWF  2C,W
0083:  MOVWF  54
0084:  MOVF   2D,W
0085:  MOVWF  55
0086:  MOVF   2F,W
0087:  BTFSS  03.0
0088:  INCFSZ 2F,W
0089:  SUBWF  55,F
008A:  MOVF   55,W
008B:  MOVWF  57
008C:  MOVF   54,W
008D:  MOVWF  56
008E:  CALL   05D
008F:  MOVF   7A,W
0090:  MOVWF  59
0091:  MOVF   79,W
0092:  MOVWF  58
0093:  MOVF   78,W
0094:  MOVWF  57
0095:  MOVF   77,W
0096:  MOVWF  56
0097:  CLRF   5D
0098:  CLRF   5C
0099:  MOVLW  40
009A:  MOVWF  5B
009B:  MOVLW  80
009C:  MOVWF  5A
*
0166:  MOVF   7A,W
0167:  MOVWF  35
0168:  MOVF   79,W
0169:  MOVWF  34
016A:  MOVF   78,W
016B:  MOVWF  33
016C:  MOVF   77,W
016D:  MOVWF  32
....................       prevAngle = revAngle;  
016E:  MOVF   2D,W
016F:  MOVWF  2F
0170:  MOVF   2C,W
0171:  MOVWF  2E
....................       i = 0;  
0172:  CLRF   36
....................    }  
0173:  BCF    0B.2
0174:  BCF    0A.3
0175:  BCF    0A.4
0176:  GOTO   02F
.................... }  
....................  
....................   
....................  
.................... void main()  
*
04F4:  MOVF   03,W
04F5:  ANDLW  1F
04F6:  MOVWF  03
04F7:  CLRF   2D
04F8:  CLRF   2C
04F9:  CLRF   2F
04FA:  CLRF   2E
04FB:  CLRF   35
04FC:  CLRF   34
04FD:  CLRF   33
04FE:  CLRF   32
04FF:  CLRF   36
0500:  MOVLW  FF
0501:  MOVWF  37
0502:  BSF    03.5
0503:  BSF    1F.0
0504:  BSF    1F.1
0505:  BSF    1F.2
0506:  BCF    1F.3
0507:  MOVLW  07
0508:  MOVWF  1C
0509:  BCF    03.7
.................... {  
....................    lcd_init();  
050A:  BCF    03.5
050B:  GOTO   1E4
....................    lcd_cursor_on(TRUE);  
050C:  MOVLW  01
050D:  MOVWF  3A
050E:  GOTO   222
....................    port_b_pullups(TRUE);  
050F:  BSF    03.5
0510:  BCF    01.7
....................    enable_interrupts(GLOBAL);  
0511:  MOVLW  C0
0512:  BCF    03.5
0513:  IORWF  0B,F
....................    clear_interrupt(int_ext);  
0514:  BCF    0B.1
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256);   
0515:  BSF    03.5
0516:  MOVF   01,W
0517:  ANDLW  C0
0518:  IORLW  07
0519:  MOVWF  01
....................    set_timer0(60);  
051A:  MOVLW  3C
051B:  BCF    03.5
051C:  MOVWF  01
....................    enable_interrupts(int_timer0);  
051D:  BSF    0B.5
....................    enable_interrupts(int_ext);  
051E:  BSF    0B.4
....................    setup_adc_ports(AN0_AN1_AN3); //A0 A1 A3 are configured for analog input pin  
051F:  BSF    03.5
0520:  BCF    1F.0
0521:  BCF    1F.1
0522:  BSF    1F.2
0523:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); //enable ADC and set clock for ADC  
0524:  BCF    1F.6
0525:  BCF    03.5
0526:  BCF    1F.6
0527:  BSF    1F.7
0528:  BSF    03.5
0529:  BSF    1F.7
052A:  BCF    03.5
052B:  BSF    1F.0
....................    unsigned int16 result_1; //variable for A0 value  
....................    set_tris_c(0x00); //set all portb pins as output  
052C:  MOVLW  00
052D:  BSF    03.5
052E:  MOVWF  07
052F:  BCF    03.5
0530:  MOVWF  37
....................    setup_ccp1(CCP_PWM); //4kHz PWM signal output at CCP1 pin 17  
0531:  BCF    37.2
0532:  MOVF   37,W
0533:  BSF    03.5
0534:  MOVWF  07
0535:  BCF    03.5
0536:  BCF    07.2
0537:  MOVLW  0C
0538:  MOVWF  17
....................      
....................    setup_timer_2(T2_DIV_BY_16, 255, 1);  
0539:  MOVLW  00
053A:  MOVWF  78
053B:  IORLW  06
053C:  MOVWF  12
053D:  MOVLW  FF
053E:  BSF    03.5
053F:  MOVWF  12
....................    set_pwm2_duty(0);  
0540:  BCF    03.5
0541:  CLRF   1B
....................    output_low(IN1);  
0542:  BCF    37.3
0543:  MOVF   37,W
0544:  BSF    03.5
0545:  MOVWF  07
0546:  BCF    03.5
0547:  BCF    07.3
....................    output_high(IN2);  
0548:  BCF    37.4
0549:  MOVF   37,W
054A:  BSF    03.5
054B:  MOVWF  07
054C:  BCF    03.5
054D:  BSF    07.4
....................      
....................    while(TRUE)  
....................    {  
....................       set_adc_channel(0);                    // next analog reading will be from channel 0  
054E:  MOVLW  00
054F:  MOVWF  78
0550:  MOVF   1F,W
0551:  ANDLW  C7
0552:  IORWF  78,W
0553:  MOVWF  1F
....................       delay_us(10);                                //allow time after channel selection and reading  
0554:  MOVLW  02
0555:  MOVWF  77
0556:  DECFSZ 77,F
0557:  GOTO   556
0558:  GOTO   559
0559:  NOP
....................       result_1 = read_adc();                //start and read A/D  
055A:  BSF    1F.2
055B:  BTFSC  1F.2
055C:  GOTO   55B
055D:  BSF    03.5
055E:  MOVF   1E,W
055F:  BCF    03.5
0560:  MOVWF  38
0561:  MOVF   1E,W
0562:  MOVWF  39
....................       delay_us(10);                               //allow time after channel selection and reading  
0563:  MOVLW  02
0564:  MOVWF  77
0565:  DECFSZ 77,F
0566:  GOTO   565
0567:  GOTO   568
0568:  NOP
0569:  CLRF   2B
056A:  BTFSC  0B.7
056B:  BSF    2B.7
056C:  BCF    0B.7
....................       pwmOut = result_1*0.249;       // mapping analog input to pwm output  
056D:  MOVF   39,W
056E:  MOVWF  57
056F:  MOVF   38,W
0570:  MOVWF  56
0571:  CALL   05D
0572:  BTFSC  2B.7
0573:  BSF    0B.7
0574:  MOVF   7A,W
0575:  MOVWF  4A
0576:  MOVF   79,W
0577:  MOVWF  49
0578:  MOVF   78,W
0579:  MOVWF  48
057A:  MOVF   77,W
057B:  MOVWF  47
057C:  MOVLW  DB
057D:  MOVWF  4E
057E:  MOVLW  F9
057F:  MOVWF  4D
0580:  MOVLW  7E
0581:  MOVWF  4C
0582:  MOVLW  7C
0583:  MOVWF  4B
0584:  CALL   231
0585:  MOVF   7A,W
0586:  MOVWF  3D
0587:  MOVF   79,W
0588:  MOVWF  3C
0589:  MOVF   78,W
058A:  MOVWF  3B
058B:  MOVF   77,W
058C:  MOVWF  3A
058D:  GOTO   2A6
058E:  MOVF   79,W
058F:  MOVWF  31
0590:  MOVF   78,W
0591:  MOVWF  30
....................       set_pwm1_duty(pwmOut);      //set pulse-width during which signal is high  
0592:  MOVF   31,W
0593:  MOVWF  79
0594:  MOVF   30,W
0595:  MOVWF  78
0596:  RRF    79,F
0597:  RRF    78,F
0598:  RRF    79,F
0599:  RRF    78,F
059A:  RRF    79,F
059B:  MOVF   78,W
059C:  MOVWF  15
059D:  RRF    79,F
059E:  RRF    79,W
059F:  ANDLW  30
05A0:  MOVWF  77
05A1:  MOVF   17,W
05A2:  ANDLW  CF
05A3:  IORWF  77,W
05A4:  MOVWF  17
....................       printf(lcd_putc, "\fAngle:%lu\n",revAngle);  
05A5:  MOVLW  77
05A6:  BSF    03.6
05A7:  MOVWF  0D
05A8:  MOVLW  01
05A9:  MOVWF  0F
05AA:  BCF    03.0
05AB:  MOVLW  07
05AC:  BCF    03.6
05AD:  MOVWF  3A
05AE:  GOTO   305
05AF:  MOVLW  10
05B0:  MOVWF  04
05B1:  MOVF   2D,W
05B2:  MOVWF  3B
05B3:  MOVF   2C,W
05B4:  MOVWF  3A
05B5:  GOTO   35E
05B6:  MOVLW  0A
05B7:  MOVWF  47
05B8:  CALL   2D9
....................       printf(lcd_putc, "w:%f\n",dx_dt);  
05B9:  MOVLW  77
05BA:  MOVWF  47
05BB:  CALL   2D9
05BC:  MOVLW  3A
05BD:  MOVWF  47
05BE:  CALL   2D9
05BF:  MOVLW  89
05C0:  MOVWF  04
05C1:  MOVF   35,W
05C2:  MOVWF  3D
05C3:  MOVF   34,W
05C4:  MOVWF  3C
05C5:  MOVF   33,W
05C6:  MOVWF  3B
05C7:  MOVF   32,W
05C8:  MOVWF  3A
05C9:  MOVLW  02
05CA:  MOVWF  3E
05CB:  GOTO   412
05CC:  MOVLW  0A
05CD:  MOVWF  47
05CE:  CALL   2D9
....................       delay_ms(50);  
05CF:  MOVLW  32
05D0:  MOVWF  48
05D1:  CALL   17D
05D2:  GOTO   54E
....................     }  
.................... }  
05D3:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

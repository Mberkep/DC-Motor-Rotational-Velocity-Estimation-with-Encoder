CCS PCM C Compiler, Version 5.015, 5967               18-May-23 18:34

               Filename:   C:\Users\Berke\Desktop\mehmetberke_parlat_lab3\code2\main.lst

               ROM used:   2239 words (27%)
                           Largest free fragment is 2048
               RAM used:   56 (15%) at main() level
                           104 (28%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   050
002B:  BTFSS  0B.5
002C:  GOTO   02F
002D:  BTFSC  0B.2
002E:  GOTO   053
002F:  MOVF   22,W
0030:  MOVWF  04
0031:  MOVF   23,W
0032:  MOVWF  77
0033:  MOVF   24,W
0034:  MOVWF  78
0035:  MOVF   25,W
0036:  MOVWF  79
0037:  MOVF   26,W
0038:  MOVWF  7A
0039:  MOVF   27,W
003A:  BSF    03.6
003B:  MOVWF  0D
003C:  BCF    03.6
003D:  MOVF   28,W
003E:  BSF    03.6
003F:  MOVWF  0F
0040:  BCF    03.6
0041:  MOVF   29,W
0042:  BSF    03.6
0043:  MOVWF  0C
0044:  BCF    03.6
0045:  MOVF   2A,W
0046:  BSF    03.6
0047:  MOVWF  0E
0048:  BCF    03.6
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   31D
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   37D
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0056:  MOVLW  8E
0057:  MOVWF  77
0058:  MOVF   74,W
0059:  MOVWF  78
005A:  MOVF   73,W
005B:  MOVWF  79
005C:  CLRF   7A
005D:  MOVF   78,F
005E:  BTFSS  03.2
005F:  GOTO   06A
0060:  MOVF   79,W
0061:  MOVWF  78
0062:  CLRF   79
0063:  MOVLW  08
0064:  SUBWF  77,F
0065:  MOVF   78,F
0066:  BTFSS  03.2
0067:  GOTO   06A
0068:  CLRF   77
0069:  GOTO   072
006A:  BCF    03.0
006B:  BTFSC  78.7
006C:  GOTO   071
006D:  RLF    79,F
006E:  RLF    78,F
006F:  DECF   77,F
0070:  GOTO   06A
0071:  BCF    78.7
0072:  RETURN
0073:  MOVF   73,W
0074:  BTFSC  03.2
0075:  GOTO   0F2
0076:  BSF    03.5
0077:  MOVWF  20
0078:  MOVF   7B,W
0079:  BTFSS  03.2
007A:  GOTO   07D
007B:  BCF    03.5
007C:  GOTO   0F2
007D:  ADDWF  20,F
007E:  BTFSC  03.0
007F:  GOTO   08B
0080:  MOVLW  7F
0081:  SUBWF  20,F
0082:  BTFSC  03.0
0083:  GOTO   086
0084:  BCF    03.5
0085:  GOTO   0F2
0086:  BTFSS  03.2
0087:  GOTO   08A
0088:  BCF    03.5
0089:  GOTO   0F2
008A:  GOTO   091
008B:  MOVLW  81
008C:  ADDWF  20,F
008D:  BTFSS  03.0
008E:  GOTO   091
008F:  BCF    03.5
0090:  GOTO   0F2
0091:  MOVF   20,W
0092:  MOVWF  77
0093:  CLRF   78
0094:  CLRF   79
0095:  CLRF   7A
0096:  MOVF   74,W
0097:  MOVWF  24
0098:  BSF    24.7
0099:  MOVF   75,W
009A:  MOVWF  23
009B:  MOVF   76,W
009C:  MOVWF  22
009D:  MOVLW  18
009E:  MOVWF  20
009F:  CLRF   21
00A0:  BTFSS  22.0
00A1:  GOTO   0BA
00A2:  MOVF   7E,W
00A3:  ADDWF  7A,F
00A4:  BTFSS  03.0
00A5:  GOTO   0AC
00A6:  INCF   79,F
00A7:  BTFSS  03.2
00A8:  GOTO   0AC
00A9:  INCF   78,F
00AA:  BTFSC  03.2
00AB:  BSF    21.7
00AC:  MOVF   7D,W
00AD:  ADDWF  79,F
00AE:  BTFSS  03.0
00AF:  GOTO   0B3
00B0:  INCF   78,F
00B1:  BTFSC  03.2
00B2:  BSF    21.7
00B3:  MOVF   7C,W
00B4:  MOVWF  75
00B5:  BSF    75.7
00B6:  MOVF   75,W
00B7:  ADDWF  78,F
00B8:  BTFSC  03.0
00B9:  BSF    21.7
00BA:  RLF    21,F
00BB:  RRF    78,F
00BC:  RRF    79,F
00BD:  RRF    7A,F
00BE:  RRF    24,F
00BF:  RRF    23,F
00C0:  RRF    22,F
00C1:  BCF    03.0
00C2:  DECFSZ 20,F
00C3:  GOTO   09F
00C4:  MOVLW  01
00C5:  ADDWF  77,F
00C6:  BTFSS  03.0
00C7:  GOTO   0CA
00C8:  BCF    03.5
00C9:  GOTO   0F2
00CA:  BTFSC  78.7
00CB:  GOTO   0D4
00CC:  RLF    24,F
00CD:  RLF    7A,F
00CE:  RLF    79,F
00CF:  RLF    78,F
00D0:  DECFSZ 77,F
00D1:  GOTO   0D4
00D2:  BCF    03.5
00D3:  GOTO   0F2
00D4:  BTFSS  24.7
00D5:  GOTO   0E7
00D6:  INCF   7A,F
00D7:  BTFSS  03.2
00D8:  GOTO   0E7
00D9:  INCF   79,F
00DA:  BTFSS  03.2
00DB:  GOTO   0E7
00DC:  INCF   78,F
00DD:  BTFSS  03.2
00DE:  GOTO   0E7
00DF:  RRF    78,F
00E0:  RRF    79,F
00E1:  RRF    7A,F
00E2:  INCF   77,F
00E3:  BTFSS  03.2
00E4:  GOTO   0E7
00E5:  BCF    03.5
00E6:  GOTO   0F2
00E7:  MOVF   74,W
00E8:  MOVWF  21
00E9:  MOVF   7C,W
00EA:  XORWF  21,F
00EB:  BTFSS  21.7
00EC:  GOTO   0EF
00ED:  BSF    78.7
00EE:  GOTO   0F7
00EF:  BCF    78.7
00F0:  GOTO   0F7
00F1:  BCF    03.5
00F2:  CLRF   77
00F3:  CLRF   78
00F4:  CLRF   79
00F5:  CLRF   7A
00F6:  BSF    03.5
00F7:  BCF    03.5
00F8:  RETURN
00F9:  MOVLW  80
00FA:  BTFSC  03.1
00FB:  XORWF  74,F
00FC:  BSF    03.5
00FD:  CLRF   22
00FE:  CLRF   23
00FF:  MOVF   70,W
0100:  MOVWF  21
0101:  MOVF   74,W
0102:  XORWF  21,F
0103:  BCF    03.5
0104:  MOVF   6F,W
0105:  BTFSC  03.2
0106:  GOTO   1EF
0107:  BSF    03.5
0108:  MOVWF  20
0109:  MOVWF  77
010A:  MOVF   73,W
010B:  BTFSC  03.2
010C:  GOTO   1F9
010D:  SUBWF  20,F
010E:  BTFSC  03.2
010F:  GOTO   193
0110:  BTFSS  03.0
0111:  GOTO   14F
0112:  MOVF   74,W
0113:  MOVWF  26
0114:  BSF    26.7
0115:  MOVF   75,W
0116:  MOVWF  25
0117:  MOVF   76,W
0118:  MOVWF  24
0119:  CLRF   23
011A:  BCF    03.0
011B:  RRF    26,F
011C:  RRF    25,F
011D:  RRF    24,F
011E:  RRF    23,F
011F:  DECFSZ 20,F
0120:  GOTO   119
0121:  BTFSS  21.7
0122:  GOTO   126
0123:  BSF    22.0
0124:  GOTO   20F
0125:  BCF    22.0
0126:  BCF    20.0
0127:  BSF    22.4
0128:  MOVLW  72
0129:  MOVWF  04
012A:  BCF    03.7
012B:  GOTO   224
012C:  BCF    22.4
012D:  BTFSC  21.7
012E:  GOTO   139
012F:  BTFSS  20.0
0130:  GOTO   144
0131:  RRF    26,F
0132:  RRF    25,F
0133:  RRF    24,F
0134:  RRF    23,F
0135:  INCF   77,F
0136:  BTFSC  03.2
0137:  GOTO   20A
0138:  GOTO   144
0139:  BTFSC  26.7
013A:  GOTO   147
013B:  BCF    03.0
013C:  RLF    23,F
013D:  RLF    24,F
013E:  RLF    25,F
013F:  RLF    26,F
0140:  DECF   77,F
0141:  BTFSC  03.2
0142:  GOTO   20A
0143:  GOTO   139
0144:  BSF    22.6
0145:  GOTO   1B3
0146:  BCF    22.6
0147:  MOVF   70,W
0148:  MOVWF  21
0149:  BTFSS  21.7
014A:  GOTO   14D
014B:  BSF    26.7
014C:  GOTO   203
014D:  BCF    26.7
014E:  GOTO   203
014F:  MOVF   73,W
0150:  MOVWF  20
0151:  MOVWF  77
0152:  BCF    03.5
0153:  MOVF   6F,W
0154:  BSF    03.5
0155:  SUBWF  20,F
0156:  MOVF   70,W
0157:  MOVWF  26
0158:  BSF    26.7
0159:  MOVF   71,W
015A:  MOVWF  25
015B:  MOVF   72,W
015C:  MOVWF  24
015D:  CLRF   23
015E:  BCF    03.0
015F:  RRF    26,F
0160:  RRF    25,F
0161:  RRF    24,F
0162:  RRF    23,F
0163:  DECFSZ 20,F
0164:  GOTO   15D
0165:  BTFSS  21.7
0166:  GOTO   16A
0167:  BSF    22.1
0168:  GOTO   20F
0169:  BCF    22.1
016A:  BCF    20.0
016B:  BSF    22.5
016C:  MOVLW  76
016D:  MOVWF  04
016E:  BCF    03.7
016F:  GOTO   224
0170:  BCF    22.5
0171:  BTFSC  21.7
0172:  GOTO   17D
0173:  BTFSS  20.0
0174:  GOTO   188
0175:  RRF    26,F
0176:  RRF    25,F
0177:  RRF    24,F
0178:  RRF    23,F
0179:  INCF   77,F
017A:  BTFSC  03.2
017B:  GOTO   20A
017C:  GOTO   188
017D:  BTFSC  26.7
017E:  GOTO   18B
017F:  BCF    03.0
0180:  RLF    23,F
0181:  RLF    24,F
0182:  RLF    25,F
0183:  RLF    26,F
0184:  DECF   77,F
0185:  BTFSC  03.2
0186:  GOTO   20A
0187:  GOTO   17D
0188:  BSF    22.7
0189:  GOTO   1B3
018A:  BCF    22.7
018B:  MOVF   74,W
018C:  MOVWF  21
018D:  BTFSS  21.7
018E:  GOTO   191
018F:  BSF    26.7
0190:  GOTO   203
0191:  BCF    26.7
0192:  GOTO   203
0193:  MOVF   74,W
0194:  MOVWF  26
0195:  BSF    26.7
0196:  MOVF   75,W
0197:  MOVWF  25
0198:  MOVF   76,W
0199:  MOVWF  24
019A:  BTFSS  21.7
019B:  GOTO   1A0
019C:  BCF    26.7
019D:  BSF    22.2
019E:  GOTO   20F
019F:  BCF    22.2
01A0:  CLRF   23
01A1:  BCF    20.0
01A2:  MOVLW  72
01A3:  MOVWF  04
01A4:  BCF    03.7
01A5:  GOTO   224
01A6:  BTFSC  21.7
01A7:  GOTO   1C9
01A8:  MOVF   70,W
01A9:  MOVWF  21
01AA:  BTFSS  20.0
01AB:  GOTO   1B3
01AC:  RRF    26,F
01AD:  RRF    25,F
01AE:  RRF    24,F
01AF:  RRF    23,F
01B0:  INCF   77,F
01B1:  BTFSC  03.2
01B2:  GOTO   20A
01B3:  BTFSS  23.7
01B4:  GOTO   1C4
01B5:  INCF   24,F
01B6:  BTFSS  03.2
01B7:  GOTO   1C4
01B8:  INCF   25,F
01B9:  BTFSS  03.2
01BA:  GOTO   1C4
01BB:  INCF   26,F
01BC:  BTFSS  03.2
01BD:  GOTO   1C4
01BE:  RRF    26,F
01BF:  RRF    25,F
01C0:  RRF    24,F
01C1:  INCF   77,F
01C2:  BTFSC  03.2
01C3:  GOTO   20A
01C4:  BTFSC  22.6
01C5:  GOTO   146
01C6:  BTFSC  22.7
01C7:  GOTO   18A
01C8:  GOTO   1E8
01C9:  MOVLW  80
01CA:  XORWF  26,F
01CB:  BTFSS  26.7
01CC:  GOTO   1D1
01CD:  GOTO   20F
01CE:  MOVF   74,W
01CF:  MOVWF  21
01D0:  GOTO   1DE
01D1:  MOVF   70,W
01D2:  MOVWF  21
01D3:  MOVF   26,F
01D4:  BTFSS  03.2
01D5:  GOTO   1DE
01D6:  MOVF   25,F
01D7:  BTFSS  03.2
01D8:  GOTO   1DE
01D9:  MOVF   24,F
01DA:  BTFSS  03.2
01DB:  GOTO   1DE
01DC:  CLRF   77
01DD:  GOTO   203
01DE:  BTFSC  26.7
01DF:  GOTO   1E8
01E0:  BCF    03.0
01E1:  RLF    23,F
01E2:  RLF    24,F
01E3:  RLF    25,F
01E4:  RLF    26,F
01E5:  DECFSZ 77,F
01E6:  GOTO   1DE
01E7:  GOTO   20A
01E8:  BTFSS  21.7
01E9:  GOTO   1EC
01EA:  BSF    26.7
01EB:  GOTO   203
01EC:  BCF    26.7
01ED:  GOTO   203
01EE:  BCF    03.5
01EF:  MOVF   73,W
01F0:  MOVWF  77
01F1:  MOVF   74,W
01F2:  BSF    03.5
01F3:  MOVWF  26
01F4:  MOVF   75,W
01F5:  MOVWF  25
01F6:  MOVF   76,W
01F7:  MOVWF  24
01F8:  GOTO   203
01F9:  BCF    03.5
01FA:  MOVF   6F,W
01FB:  MOVWF  77
01FC:  MOVF   70,W
01FD:  BSF    03.5
01FE:  MOVWF  26
01FF:  MOVF   71,W
0200:  MOVWF  25
0201:  MOVF   72,W
0202:  MOVWF  24
0203:  MOVF   26,W
0204:  MOVWF  78
0205:  MOVF   25,W
0206:  MOVWF  79
0207:  MOVF   24,W
0208:  MOVWF  7A
0209:  GOTO   242
020A:  CLRF   77
020B:  CLRF   78
020C:  CLRF   79
020D:  CLRF   7A
020E:  GOTO   242
020F:  CLRF   23
0210:  COMF   24,F
0211:  COMF   25,F
0212:  COMF   26,F
0213:  COMF   23,F
0214:  INCF   23,F
0215:  BTFSS  03.2
0216:  GOTO   21D
0217:  INCF   24,F
0218:  BTFSS  03.2
0219:  GOTO   21D
021A:  INCF   25,F
021B:  BTFSC  03.2
021C:  INCF   26,F
021D:  BTFSC  22.0
021E:  GOTO   125
021F:  BTFSC  22.1
0220:  GOTO   169
0221:  BTFSC  22.2
0222:  GOTO   19F
0223:  GOTO   1CE
0224:  MOVF   00,W
0225:  ADDWF  24,F
0226:  BTFSS  03.0
0227:  GOTO   22E
0228:  INCF   25,F
0229:  BTFSS  03.2
022A:  GOTO   22E
022B:  INCF   26,F
022C:  BTFSC  03.2
022D:  BSF    20.0
022E:  DECF   04,F
022F:  MOVF   00,W
0230:  ADDWF  25,F
0231:  BTFSS  03.0
0232:  GOTO   236
0233:  INCF   26,F
0234:  BTFSC  03.2
0235:  BSF    20.0
0236:  DECF   04,F
0237:  MOVF   00,W
0238:  BTFSS  00.7
0239:  XORLW  80
023A:  ADDWF  26,F
023B:  BTFSC  03.0
023C:  BSF    20.0
023D:  BTFSC  22.4
023E:  GOTO   12C
023F:  BTFSC  22.5
0240:  GOTO   170
0241:  GOTO   1A6
0242:  BCF    03.5
0243:  RETURN
0244:  MOVF   73,W
0245:  BTFSC  03.2
0246:  GOTO   316
0247:  BSF    03.5
0248:  MOVWF  24
0249:  MOVF   7B,W
024A:  BTFSS  03.2
024B:  GOTO   24E
024C:  BCF    03.5
024D:  GOTO   316
024E:  SUBWF  24,F
024F:  BTFSS  03.0
0250:  GOTO   258
0251:  MOVLW  7F
0252:  ADDWF  24,F
0253:  BTFSS  03.0
0254:  GOTO   257
0255:  BCF    03.5
0256:  GOTO   316
0257:  GOTO   262
0258:  MOVLW  81
0259:  SUBWF  24,F
025A:  BTFSC  03.0
025B:  GOTO   25E
025C:  BCF    03.5
025D:  GOTO   316
025E:  BTFSS  03.2
025F:  GOTO   262
0260:  BCF    03.5
0261:  GOTO   316
0262:  MOVF   24,W
0263:  MOVWF  77
0264:  CLRF   78
0265:  CLRF   79
0266:  CLRF   7A
0267:  CLRF   23
0268:  MOVF   74,W
0269:  MOVWF  22
026A:  BSF    22.7
026B:  MOVF   75,W
026C:  MOVWF  21
026D:  MOVF   76,W
026E:  MOVWF  20
026F:  MOVLW  19
0270:  MOVWF  24
0271:  MOVF   7E,W
0272:  SUBWF  20,F
0273:  BTFSC  03.0
0274:  GOTO   285
0275:  MOVLW  01
0276:  SUBWF  21,F
0277:  BTFSC  03.0
0278:  GOTO   285
0279:  SUBWF  22,F
027A:  BTFSC  03.0
027B:  GOTO   285
027C:  SUBWF  23,F
027D:  BTFSC  03.0
027E:  GOTO   285
027F:  INCF   23,F
0280:  INCF   22,F
0281:  INCF   21,F
0282:  MOVF   7E,W
0283:  ADDWF  20,F
0284:  GOTO   2B7
0285:  MOVF   7D,W
0286:  SUBWF  21,F
0287:  BTFSC  03.0
0288:  GOTO   2A0
0289:  MOVLW  01
028A:  SUBWF  22,F
028B:  BTFSC  03.0
028C:  GOTO   2A0
028D:  SUBWF  23,F
028E:  BTFSC  03.0
028F:  GOTO   2A0
0290:  INCF   23,F
0291:  INCF   22,F
0292:  MOVF   7D,W
0293:  ADDWF  21,F
0294:  MOVF   7E,W
0295:  ADDWF  20,F
0296:  BTFSS  03.0
0297:  GOTO   2B7
0298:  INCF   21,F
0299:  BTFSS  03.2
029A:  GOTO   2B7
029B:  INCF   22,F
029C:  BTFSS  03.2
029D:  GOTO   2B7
029E:  INCF   23,F
029F:  GOTO   2B7
02A0:  MOVF   7C,W
02A1:  IORLW  80
02A2:  SUBWF  22,F
02A3:  BTFSC  03.0
02A4:  GOTO   2B6
02A5:  MOVLW  01
02A6:  SUBWF  23,F
02A7:  BTFSC  03.0
02A8:  GOTO   2B6
02A9:  INCF   23,F
02AA:  MOVF   7C,W
02AB:  IORLW  80
02AC:  ADDWF  22,F
02AD:  MOVF   7D,W
02AE:  ADDWF  21,F
02AF:  BTFSS  03.0
02B0:  GOTO   294
02B1:  INCF   22,F
02B2:  BTFSS  03.2
02B3:  GOTO   294
02B4:  INCF   23,F
02B5:  GOTO   294
02B6:  BSF    7A.0
02B7:  DECFSZ 24,F
02B8:  GOTO   2BA
02B9:  GOTO   2C5
02BA:  BCF    03.0
02BB:  RLF    20,F
02BC:  RLF    21,F
02BD:  RLF    22,F
02BE:  RLF    23,F
02BF:  BCF    03.0
02C0:  RLF    7A,F
02C1:  RLF    79,F
02C2:  RLF    78,F
02C3:  RLF    25,F
02C4:  GOTO   271
02C5:  BTFSS  25.0
02C6:  GOTO   2CD
02C7:  BCF    03.0
02C8:  RRF    78,F
02C9:  RRF    79,F
02CA:  RRF    7A,F
02CB:  RRF    25,F
02CC:  GOTO   2D1
02CD:  DECFSZ 77,F
02CE:  GOTO   2D1
02CF:  BCF    03.5
02D0:  GOTO   316
02D1:  BTFSC  25.7
02D2:  GOTO   2FA
02D3:  BCF    03.0
02D4:  RLF    20,F
02D5:  RLF    21,F
02D6:  RLF    22,F
02D7:  RLF    23,F
02D8:  MOVF   7E,W
02D9:  SUBWF  20,F
02DA:  BTFSC  03.0
02DB:  GOTO   2E6
02DC:  MOVLW  01
02DD:  SUBWF  21,F
02DE:  BTFSC  03.0
02DF:  GOTO   2E6
02E0:  SUBWF  22,F
02E1:  BTFSC  03.0
02E2:  GOTO   2E6
02E3:  SUBWF  23,F
02E4:  BTFSS  03.0
02E5:  GOTO   30B
02E6:  MOVF   7D,W
02E7:  SUBWF  21,F
02E8:  BTFSC  03.0
02E9:  GOTO   2F1
02EA:  MOVLW  01
02EB:  SUBWF  22,F
02EC:  BTFSC  03.0
02ED:  GOTO   2F1
02EE:  SUBWF  23,F
02EF:  BTFSS  03.0
02F0:  GOTO   30B
02F1:  MOVF   7C,W
02F2:  IORLW  80
02F3:  SUBWF  22,F
02F4:  BTFSC  03.0
02F5:  GOTO   2FA
02F6:  MOVLW  01
02F7:  SUBWF  23,F
02F8:  BTFSS  03.0
02F9:  GOTO   30B
02FA:  INCF   7A,F
02FB:  BTFSS  03.2
02FC:  GOTO   30B
02FD:  INCF   79,F
02FE:  BTFSS  03.2
02FF:  GOTO   30B
0300:  INCF   78,F
0301:  BTFSS  03.2
0302:  GOTO   30B
0303:  INCF   77,F
0304:  BTFSS  03.2
0305:  GOTO   308
0306:  BCF    03.5
0307:  GOTO   316
0308:  RRF    78,F
0309:  RRF    79,F
030A:  RRF    7A,F
030B:  MOVF   74,W
030C:  MOVWF  24
030D:  MOVF   7C,W
030E:  XORWF  24,F
030F:  BTFSS  24.7
0310:  GOTO   313
0311:  BSF    78.7
0312:  GOTO   31B
0313:  BCF    78.7
0314:  GOTO   31B
0315:  BCF    03.5
0316:  CLRF   77
0317:  CLRF   78
0318:  CLRF   79
0319:  CLRF   7A
031A:  BSF    03.5
031B:  BCF    03.5
031C:  RETURN
*
0389:  CLRF   78
038A:  CLRF   79
038B:  CLRF   77
038C:  CLRF   7A
038D:  MOVF   72,W
038E:  BTFSS  03.2
038F:  GOTO   393
0390:  MOVF   71,W
0391:  BTFSC  03.2
0392:  GOTO   3AD
0393:  MOVLW  10
0394:  MOVWF  73
0395:  BCF    03.0
0396:  RLF    6F,F
0397:  RLF    70,F
0398:  RLF    77,F
0399:  RLF    7A,F
039A:  MOVF   72,W
039B:  SUBWF  7A,W
039C:  BTFSS  03.2
039D:  GOTO   3A0
039E:  MOVF   71,W
039F:  SUBWF  77,W
03A0:  BTFSS  03.0
03A1:  GOTO   3A9
03A2:  MOVF   71,W
03A3:  SUBWF  77,F
03A4:  BTFSS  03.0
03A5:  DECF   7A,F
03A6:  MOVF   72,W
03A7:  SUBWF  7A,F
03A8:  BSF    03.0
03A9:  RLF    78,F
03AA:  RLF    79,F
03AB:  DECFSZ 73,F
03AC:  GOTO   395
*
03D5:  DATA D2,32
03D6:  DATA 66,1D
03D7:  DATA 25,17
03D8:  DATA 32,33
03D9:  DATA 20,10
03DA:  DATA 20,00
03DB:  DATA D6,32
03DC:  DATA EC,37
03DD:  DATA BA,12
03DE:  DATA 2E,19
03DF:  DATA 66,10
03E0:  DATA 20,00
03E1:  DATA 45,39
03E2:  DATA 72,1D
03E3:  DATA 25,17
03E4:  DATA 32,33
03E5:  DATA 20,10
03E6:  DATA 20,00
03E7:  DATA 49,37
03E8:  DATA F4,22
03E9:  DATA 72,39
03EA:  DATA BA,12
03EB:  DATA 2E,19
03EC:  DATA 66,00
*
04A1:  MOVLW  8E
04A2:  MOVWF  77
04A3:  MOVF   55,W
04A4:  SUBWF  77,F
04A5:  MOVF   56,W
04A6:  MOVWF  79
04A7:  MOVF   57,W
04A8:  MOVWF  78
04A9:  BSF    79.7
04AA:  MOVF   77,F
04AB:  BTFSC  03.2
04AC:  GOTO   4B8
04AD:  BCF    03.0
04AE:  MOVF   79,F
04AF:  BTFSS  03.2
04B0:  GOTO   4B4
04B1:  MOVF   78,F
04B2:  BTFSC  03.2
04B3:  GOTO   4B8
04B4:  RRF    79,F
04B5:  RRF    78,F
04B6:  DECFSZ 77,F
04B7:  GOTO   4AD
04B8:  BTFSS  56.7
04B9:  GOTO   4BF
04BA:  COMF   78,F
04BB:  COMF   79,F
04BC:  INCF   78,F
04BD:  BTFSC  03.2
04BE:  INCF   79,F
04BF:  BSF    0A.3
04C0:  BCF    0A.4
04C1:  GOTO   0C0 (RETURN)
*
0500:  MOVF   0B,W
0501:  MOVWF  56
0502:  BCF    0B.7
0503:  BSF    03.5
0504:  BSF    03.6
0505:  BSF    0C.7
0506:  BSF    0C.0
0507:  NOP
0508:  NOP
0509:  BCF    03.5
050A:  BCF    03.6
050B:  BTFSC  56.7
050C:  BSF    0B.7
050D:  BTFSC  03.0
050E:  GOTO   537
050F:  BSF    03.6
0510:  MOVF   0C,W
0511:  ANDLW  7F
0512:  BCF    03.6
0513:  MOVWF  56
0514:  BSF    03.6
0515:  MOVF   0D,W
0516:  BCF    03.6
0517:  MOVWF  57
0518:  BSF    03.6
0519:  MOVF   0F,W
051A:  BCF    03.6
051B:  MOVWF  58
051C:  MOVF   56,W
051D:  MOVWF  62
051E:  CALL   4D4
051F:  MOVF   57,W
0520:  BSF    03.6
0521:  MOVWF  0D
0522:  BCF    03.6
0523:  MOVF   58,W
0524:  BSF    03.6
0525:  MOVWF  0F
0526:  BCF    03.6
0527:  MOVF   0B,W
0528:  MOVWF  59
0529:  BCF    0B.7
052A:  BSF    03.5
052B:  BSF    03.6
052C:  BSF    0C.7
052D:  BSF    0C.0
052E:  NOP
052F:  NOP
0530:  BCF    03.5
0531:  BCF    03.6
0532:  BTFSC  59.7
0533:  BSF    0B.7
0534:  DECFSZ 55,F
0535:  GOTO   537
0536:  GOTO   556
0537:  BSF    03.6
0538:  RLF    0C,W
0539:  RLF    0E,W
053A:  ANDLW  7F
053B:  BCF    03.6
053C:  MOVWF  56
053D:  BSF    03.6
053E:  MOVF   0D,W
053F:  BCF    03.6
0540:  MOVWF  57
0541:  BSF    03.6
0542:  MOVF   0F,W
0543:  BCF    03.6
0544:  MOVWF  58
0545:  MOVF   56,W
0546:  MOVWF  62
0547:  CALL   4D4
0548:  MOVF   57,W
0549:  BSF    03.6
054A:  MOVWF  0D
054B:  BCF    03.6
054C:  MOVF   58,W
054D:  BSF    03.6
054E:  MOVWF  0F
054F:  INCF   0D,F
0550:  BTFSC  03.2
0551:  INCF   0F,F
0552:  BCF    03.0
0553:  BCF    03.6
0554:  DECFSZ 55,F
0555:  GOTO   500
0556:  RETURN
0557:  BTFSC  03.1
0558:  GOTO   55C
0559:  MOVLW  6A
055A:  MOVWF  04
055B:  BCF    03.7
055C:  CLRF   77
055D:  CLRF   78
055E:  CLRF   79
055F:  CLRF   7A
0560:  CLRF   6A
0561:  CLRF   6B
0562:  CLRF   6C
0563:  CLRF   6D
0564:  MOVF   69,W
0565:  IORWF  68,W
0566:  IORWF  67,W
0567:  IORWF  66,W
0568:  BTFSC  03.2
0569:  GOTO   59A
056A:  MOVLW  20
056B:  MOVWF  6E
056C:  BCF    03.0
056D:  RLF    62,F
056E:  RLF    63,F
056F:  RLF    64,F
0570:  RLF    65,F
0571:  RLF    6A,F
0572:  RLF    6B,F
0573:  RLF    6C,F
0574:  RLF    6D,F
0575:  MOVF   69,W
0576:  SUBWF  6D,W
0577:  BTFSS  03.2
0578:  GOTO   583
0579:  MOVF   68,W
057A:  SUBWF  6C,W
057B:  BTFSS  03.2
057C:  GOTO   583
057D:  MOVF   67,W
057E:  SUBWF  6B,W
057F:  BTFSS  03.2
0580:  GOTO   583
0581:  MOVF   66,W
0582:  SUBWF  6A,W
0583:  BTFSS  03.0
0584:  GOTO   594
0585:  MOVF   66,W
0586:  SUBWF  6A,F
0587:  MOVF   67,W
0588:  BTFSS  03.0
0589:  INCFSZ 67,W
058A:  SUBWF  6B,F
058B:  MOVF   68,W
058C:  BTFSS  03.0
058D:  INCFSZ 68,W
058E:  SUBWF  6C,F
058F:  MOVF   69,W
0590:  BTFSS  03.0
0591:  INCFSZ 69,W
0592:  SUBWF  6D,F
0593:  BSF    03.0
0594:  RLF    77,F
0595:  RLF    78,F
0596:  RLF    79,F
0597:  RLF    7A,F
0598:  DECFSZ 6E,F
0599:  GOTO   56C
059A:  MOVF   6A,W
059B:  MOVWF  00
059C:  INCF   04,F
059D:  MOVF   6B,W
059E:  MOVWF  00
059F:  INCF   04,F
05A0:  MOVF   6C,W
05A1:  MOVWF  00
05A2:  INCF   04,F
05A3:  MOVF   6D,W
05A4:  MOVWF  00
05A5:  RETURN
05A6:  MOVF   04,W
05A7:  MOVWF  5A
05A8:  MOVF   59,W
05A9:  MOVWF  5C
05AA:  BTFSC  03.2
05AB:  GOTO   5CB
05AC:  CLRF   2B
05AD:  BTFSC  0B.7
05AE:  BSF    2B.7
05AF:  BCF    0B.7
05B0:  MOVF   58,W
05B1:  MOVWF  76
05B2:  MOVF   57,W
05B3:  MOVWF  75
05B4:  MOVF   56,W
05B5:  MOVWF  74
05B6:  MOVF   55,W
05B7:  MOVWF  73
05B8:  CLRF   7E
05B9:  CLRF   7D
05BA:  MOVLW  20
05BB:  MOVWF  7C
05BC:  MOVLW  82
05BD:  MOVWF  7B
05BE:  CALL   073
05BF:  BTFSC  2B.7
05C0:  BSF    0B.7
05C1:  MOVF   7A,W
05C2:  MOVWF  58
05C3:  MOVF   79,W
05C4:  MOVWF  57
05C5:  MOVF   78,W
05C6:  MOVWF  56
05C7:  MOVF   77,W
05C8:  MOVWF  55
05C9:  DECFSZ 5C,F
05CA:  GOTO   5AC
05CB:  MOVF   58,W
05CC:  MOVWF  65
05CD:  MOVF   57,W
05CE:  MOVWF  64
05CF:  MOVF   56,W
05D0:  MOVWF  63
05D1:  MOVF   55,W
05D2:  MOVWF  62
05D3:  MOVF   62,W
05D4:  SUBLW  B6
05D5:  MOVWF  62
05D6:  CLRF   7A
05D7:  MOVF   63,W
05D8:  MOVWF  66
05D9:  BSF    63.7
05DA:  BCF    03.0
05DB:  RRF    63,F
05DC:  RRF    64,F
05DD:  RRF    65,F
05DE:  RRF    7A,F
05DF:  RRF    79,F
05E0:  RRF    78,F
05E1:  RRF    77,F
05E2:  DECFSZ 62,F
05E3:  GOTO   5DA
05E4:  BTFSS  66.7
05E5:  GOTO   5F1
05E6:  COMF   77,F
05E7:  COMF   78,F
05E8:  COMF   79,F
05E9:  COMF   7A,F
05EA:  INCF   77,F
05EB:  BTFSC  03.2
05EC:  INCF   78,F
05ED:  BTFSC  03.2
05EE:  INCF   79,F
05EF:  BTFSC  03.2
05F0:  INCF   7A,F
05F1:  MOVF   7A,W
05F2:  MOVWF  58
05F3:  MOVF   79,W
05F4:  MOVWF  57
05F5:  MOVF   78,W
05F6:  MOVWF  56
05F7:  MOVF   77,W
05F8:  MOVWF  55
05F9:  BTFSS  58.7
05FA:  GOTO   608
05FB:  DECF   5A,F
05FC:  BSF    5A.5
05FD:  COMF   55,F
05FE:  COMF   56,F
05FF:  COMF   57,F
0600:  COMF   58,F
0601:  INCF   55,F
0602:  BTFSC  03.2
0603:  INCF   56,F
0604:  BTFSC  03.2
0605:  INCF   57,F
0606:  BTFSC  03.2
0607:  INCF   58,F
0608:  MOVLW  3B
0609:  MOVWF  61
060A:  MOVLW  9A
060B:  MOVWF  60
060C:  MOVLW  CA
060D:  MOVWF  5F
060E:  CLRF   5E
060F:  MOVLW  0A
0610:  MOVWF  5C
0611:  MOVF   59,W
0612:  BTFSC  03.2
0613:  INCF   5A,F
0614:  BSF    03.1
0615:  MOVLW  55
0616:  MOVWF  04
0617:  BCF    03.7
0618:  MOVF   58,W
0619:  MOVWF  65
061A:  MOVF   57,W
061B:  MOVWF  64
061C:  MOVF   56,W
061D:  MOVWF  63
061E:  MOVF   55,W
061F:  MOVWF  62
0620:  MOVF   61,W
0621:  MOVWF  69
0622:  MOVF   60,W
0623:  MOVWF  68
0624:  MOVF   5F,W
0625:  MOVWF  67
0626:  MOVF   5E,W
0627:  MOVWF  66
0628:  CALL   557
0629:  MOVF   78,W
062A:  MOVF   77,F
062B:  BTFSS  03.2
062C:  GOTO   640
062D:  INCF   59,W
062E:  SUBWF  5C,W
062F:  BTFSC  03.2
0630:  GOTO   640
0631:  MOVF   5A,W
0632:  BTFSC  03.2
0633:  GOTO   642
0634:  ANDLW  0F
0635:  SUBWF  5C,W
0636:  BTFSC  03.2
0637:  GOTO   63A
0638:  BTFSC  03.0
0639:  GOTO   672
063A:  BTFSC  5A.7
063B:  GOTO   672
063C:  BTFSC  5A.6
063D:  GOTO   642
063E:  MOVLW  20
063F:  GOTO   66E
0640:  MOVLW  20
0641:  ANDWF  5A,F
0642:  BTFSS  5A.5
0643:  GOTO   650
0644:  BCF    5A.5
0645:  MOVF   59,W
0646:  BTFSS  03.2
0647:  DECF   5A,F
0648:  MOVF   77,W
0649:  MOVWF  5A
064A:  MOVLW  2D
064B:  MOVWF  62
064C:  CALL   4D4
064D:  MOVF   5A,W
064E:  MOVWF  77
064F:  CLRF   5A
0650:  MOVF   59,W
0651:  SUBWF  5C,W
0652:  BTFSS  03.2
0653:  GOTO   65E
0654:  MOVF   77,W
0655:  MOVWF  5A
0656:  MOVLW  2E
0657:  MOVWF  62
0658:  CALL   4D4
0659:  MOVF   5A,W
065A:  MOVWF  77
065B:  MOVLW  20
065C:  ANDWF  5A,F
065D:  MOVLW  00
065E:  MOVLW  30
065F:  BTFSS  5A.5
0660:  GOTO   66E
0661:  BCF    5A.5
0662:  MOVF   59,W
0663:  BTFSS  03.2
0664:  DECF   5A,F
0665:  MOVF   77,W
0666:  MOVWF  5A
0667:  MOVLW  2D
0668:  MOVWF  62
0669:  CALL   4D4
066A:  MOVF   5A,W
066B:  MOVWF  77
066C:  CLRF   5A
066D:  MOVLW  30
066E:  ADDWF  77,F
066F:  MOVF   77,W
0670:  MOVWF  62
0671:  CALL   4D4
0672:  BCF    03.1
0673:  MOVF   61,W
0674:  MOVWF  65
0675:  MOVF   60,W
0676:  MOVWF  64
0677:  MOVF   5F,W
0678:  MOVWF  63
0679:  MOVF   5E,W
067A:  MOVWF  62
067B:  CLRF   69
067C:  CLRF   68
067D:  CLRF   67
067E:  MOVLW  0A
067F:  MOVWF  66
0680:  CALL   557
0681:  MOVF   7A,W
0682:  MOVWF  61
0683:  MOVF   79,W
0684:  MOVWF  60
0685:  MOVF   78,W
0686:  MOVWF  5F
0687:  MOVF   77,W
0688:  MOVWF  5E
0689:  DECFSZ 5C,F
068A:  GOTO   614
068B:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #FUSES NOWDT                    // No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               // No brownout reset 
.................... #FUSES NOLVP                    // No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #use delay(crystal=4000000)  
*
03ED:  MOVLW  63
03EE:  MOVWF  04
03EF:  BCF    03.7
03F0:  MOVF   00,W
03F1:  BTFSC  03.2
03F2:  GOTO   401
03F3:  MOVLW  01
03F4:  MOVWF  78
03F5:  CLRF   77
03F6:  DECFSZ 77,F
03F7:  GOTO   3F6
03F8:  DECFSZ 78,F
03F9:  GOTO   3F5
03FA:  MOVLW  4A
03FB:  MOVWF  77
03FC:  DECFSZ 77,F
03FD:  GOTO   3FC
03FE:  GOTO   3FF
03FF:  DECFSZ 00,F
0400:  GOTO   3F3
0401:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
041A:  MOVLW  0F
041B:  BSF    03.5
041C:  ANDWF  08,W
041D:  IORLW  F0
041E:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
041F:  BCF    03.5
0420:  BSF    08.2
....................    delay_cycles(1); 
0421:  NOP
....................    lcd_output_enable(1); 
0422:  BSF    08.0
....................    delay_cycles(1); 
0423:  NOP
....................    high = lcd_read_nibble(); 
0424:  CALL   40E
0425:  MOVF   78,W
0426:  MOVWF  6A
....................        
....................    lcd_output_enable(0); 
0427:  BCF    08.0
....................    delay_cycles(1); 
0428:  NOP
....................    lcd_output_enable(1); 
0429:  BSF    08.0
....................    delay_us(1); 
042A:  NOP
....................    low = lcd_read_nibble(); 
042B:  CALL   40E
042C:  MOVF   78,W
042D:  MOVWF  69
....................        
....................    lcd_output_enable(0); 
042E:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
042F:  MOVLW  0F
0430:  BSF    03.5
0431:  ANDWF  08,W
0432:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0433:  BCF    03.5
0434:  SWAPF  6A,W
0435:  MOVWF  77
0436:  MOVLW  F0
0437:  ANDWF  77,F
0438:  MOVF   77,W
0439:  IORWF  69,W
043A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
040E:  MOVF   08,W
040F:  MOVWF  77
0410:  SWAPF  08,W
0411:  ANDLW  0F
0412:  MOVWF  78
....................   #endif 
0413:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0402:  SWAPF  6A,W
0403:  ANDLW  F0
0404:  MOVWF  77
0405:  MOVLW  0F
0406:  ANDWF  08,W
0407:  IORWF  77,W
0408:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0409:  NOP
....................    lcd_output_enable(1); 
040A:  BSF    08.0
....................    delay_us(2); 
040B:  GOTO   40C
....................    lcd_output_enable(0); 
040C:  BCF    08.0
040D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0414:  BSF    03.5
0415:  BCF    08.0
....................    lcd_rs_tris(); 
0416:  BCF    08.1
....................    lcd_rw_tris(); 
0417:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0418:  BCF    03.5
0419:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
043B:  MOVF   78,W
043C:  MOVWF  69
043D:  BTFSC  69.7
043E:  GOTO   41A
....................    lcd_output_rs(address); 
043F:  BTFSS  67.0
0440:  BCF    08.1
0441:  BTFSC  67.0
0442:  BSF    08.1
....................    delay_cycles(1); 
0443:  NOP
....................    lcd_output_rw(0); 
0444:  BCF    08.2
....................    delay_cycles(1); 
0445:  NOP
....................    lcd_output_enable(0); 
0446:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0447:  SWAPF  68,W
0448:  MOVWF  69
0449:  MOVLW  0F
044A:  ANDWF  69,F
044B:  MOVF   69,W
044C:  MOVWF  6A
044D:  CALL   402
....................    lcd_send_nibble(n & 0xf); 
044E:  MOVF   68,W
044F:  ANDLW  0F
0450:  MOVWF  69
0451:  MOVWF  6A
0452:  CALL   402
0453:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0454:  MOVLW  28
0455:  MOVWF  56
0456:  MOVLW  0C
0457:  MOVWF  57
0458:  MOVLW  01
0459:  MOVWF  58
045A:  MOVLW  06
045B:  MOVWF  59
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
045C:  BCF    08.0
....................    lcd_output_rs(0); 
045D:  BCF    08.1
....................    lcd_output_rw(0); 
045E:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
045F:  MOVLW  0F
0460:  BSF    03.5
0461:  ANDWF  08,W
0462:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0463:  BCF    08.0
....................    lcd_rs_tris(); 
0464:  BCF    08.1
....................    lcd_rw_tris(); 
0465:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0466:  MOVLW  0F
0467:  BCF    03.5
0468:  MOVWF  63
0469:  CALL   3ED
....................    for(i=1;i<=3;++i) 
046A:  MOVLW  01
046B:  MOVWF  55
046C:  MOVF   55,W
046D:  SUBLW  03
046E:  BTFSS  03.0
046F:  GOTO   478
....................    { 
....................        lcd_send_nibble(3); 
0470:  MOVLW  03
0471:  MOVWF  6A
0472:  CALL   402
....................        delay_ms(5); 
0473:  MOVLW  05
0474:  MOVWF  63
0475:  CALL   3ED
0476:  INCF   55,F
0477:  GOTO   46C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0478:  MOVLW  02
0479:  MOVWF  6A
047A:  CALL   402
....................    delay_ms(5); 
047B:  MOVLW  05
047C:  MOVWF  63
047D:  CALL   3ED
....................    for(i=0;i<=3;++i) 
047E:  CLRF   55
047F:  MOVF   55,W
0480:  SUBLW  03
0481:  BTFSS  03.0
0482:  GOTO   48F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0483:  MOVLW  56
0484:  ADDWF  55,W
0485:  MOVWF  04
0486:  BCF    03.7
0487:  MOVF   00,W
0488:  MOVWF  5A
0489:  CLRF   67
048A:  MOVF   5A,W
048B:  MOVWF  68
048C:  CALL   414
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
048D:  INCF   55,F
048E:  GOTO   47F
048F:  BSF    0A.3
0490:  BCF    0A.4
0491:  GOTO   030 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
04C2:  DECFSZ 64,W
04C3:  GOTO   4C5
04C4:  GOTO   4C8
....................       address=LCD_LINE_TWO; 
04C5:  MOVLW  40
04C6:  MOVWF  65
04C7:  GOTO   4C9
....................    else 
....................       address=0; 
04C8:  CLRF   65
....................       
....................    address+=x-1; 
04C9:  MOVLW  01
04CA:  SUBWF  63,W
04CB:  ADDWF  65,F
....................    lcd_send_byte(0,0x80|address); 
04CC:  MOVF   65,W
04CD:  IORLW  80
04CE:  MOVWF  66
04CF:  CLRF   67
04D0:  MOVF   66,W
04D1:  MOVWF  68
04D2:  CALL   414
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
04D3:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
04D4:  MOVF   62,W
04D5:  XORLW  07
04D6:  BTFSC  03.2
04D7:  GOTO   4E2
04D8:  XORLW  0B
04D9:  BTFSC  03.2
04DA:  GOTO   4E7
04DB:  XORLW  06
04DC:  BTFSC  03.2
04DD:  GOTO   4EF
04DE:  XORLW  02
04DF:  BTFSC  03.2
04E0:  GOTO   4F5
04E1:  GOTO   4FA
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
04E2:  MOVLW  01
04E3:  MOVWF  63
04E4:  MOVWF  64
04E5:  CALL   4C2
04E6:  GOTO   4FF
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
04E7:  CLRF   67
04E8:  MOVLW  01
04E9:  MOVWF  68
04EA:  CALL   414
....................                      delay_ms(2); 
04EB:  MOVLW  02
04EC:  MOVWF  63
04ED:  CALL   3ED
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
04EE:  GOTO   4FF
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
04EF:  MOVLW  01
04F0:  MOVWF  63
04F1:  MOVLW  02
04F2:  MOVWF  64
04F3:  CALL   4C2
04F4:  GOTO   4FF
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
04F5:  CLRF   67
04F6:  MOVLW  10
04F7:  MOVWF  68
04F8:  CALL   414
04F9:  GOTO   4FF
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
04FA:  MOVLW  01
04FB:  MOVWF  67
04FC:  MOVF   62,W
04FD:  MOVWF  68
04FE:  CALL   414
....................      #endif 
....................    } 
04FF:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
*
0492:  MOVF   55,F
0493:  BTFSC  03.2
0494:  GOTO   49A
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
0495:  CLRF   67
0496:  MOVLW  0F
0497:  MOVWF  68
0498:  CALL   414
....................    } 
0499:  GOTO   49E
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
049A:  CLRF   67
049B:  MOVLW  0C
049C:  MOVWF  68
049D:  CALL   414
....................    } 
049E:  BSF    0A.3
049F:  BCF    0A.4
04A0:  GOTO   035 (RETURN)
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #define IN1 PIN_C3 
.................... #define IN2 PIN_C4 
....................  
.................... #define KP 0.5                    // Proportional constant 
....................  
.................... signed long pwmOut; 
.................... unsigned long int revAngle = 0; 
.................... float velo = 0.0f; 
.................... float t1 = 0; 
.................... float t2 = 0; 
.................... float deltaT = 0; 
.................... unsigned long int i = 0; 
.................... float error = 0; 
.................... float integralError = 0; 
.................... float reference = 0; 
....................  
.................... #int_ext 
.................... void external_interrupt() 
.................... { 
....................    revAngle++; 
*
031D:  INCF   2E,F
031E:  BTFSC  03.2
031F:  INCF   2F,F
....................    t2 = i * 0.512;                 // Caution here [1] 
0320:  MOVF   41,W
0321:  MOVWF  74
0322:  MOVF   40,W
0323:  MOVWF  73
0324:  CALL   056
0325:  MOVF   7A,W
0326:  MOVWF  76
0327:  MOVF   79,W
0328:  MOVWF  75
0329:  MOVF   78,W
032A:  MOVWF  74
032B:  MOVF   77,W
032C:  MOVWF  73
032D:  MOVLW  6F
032E:  MOVWF  7E
032F:  MOVLW  12
0330:  MOVWF  7D
0331:  MOVLW  03
0332:  MOVWF  7C
0333:  MOVLW  7E
0334:  MOVWF  7B
0335:  CALL   073
0336:  MOVF   7A,W
0337:  MOVWF  3B
0338:  MOVF   79,W
0339:  MOVWF  3A
033A:  MOVF   78,W
033B:  MOVWF  39
033C:  MOVF   77,W
033D:  MOVWF  38
....................    deltaT = t2 - t1; 
033E:  BSF    03.1
033F:  MOVF   3B,W
0340:  MOVWF  72
0341:  MOVF   3A,W
0342:  MOVWF  71
0343:  MOVF   39,W
0344:  MOVWF  70
0345:  MOVF   38,W
0346:  MOVWF  6F
0347:  MOVF   37,W
0348:  MOVWF  76
0349:  MOVF   36,W
034A:  MOVWF  75
034B:  MOVF   35,W
034C:  MOVWF  74
034D:  MOVF   34,W
034E:  MOVWF  73
034F:  CALL   0F9
0350:  MOVF   7A,W
0351:  MOVWF  3F
0352:  MOVF   79,W
0353:  MOVWF  3E
0354:  MOVF   78,W
0355:  MOVWF  3D
0356:  MOVF   77,W
0357:  MOVWF  3C
....................    velo = 166.667 / deltaT;        // Caution here [2] 
0358:  MOVLW  C1
0359:  MOVWF  76
035A:  MOVLW  AA
035B:  MOVWF  75
035C:  MOVLW  26
035D:  MOVWF  74
035E:  MOVLW  86
035F:  MOVWF  73
0360:  MOVF   3F,W
0361:  MOVWF  7E
0362:  MOVF   3E,W
0363:  MOVWF  7D
0364:  MOVF   3D,W
0365:  MOVWF  7C
0366:  MOVF   3C,W
0367:  MOVWF  7B
0368:  CALL   244
0369:  MOVF   7A,W
036A:  MOVWF  33
036B:  MOVF   79,W
036C:  MOVWF  32
036D:  MOVF   78,W
036E:  MOVWF  31
036F:  MOVF   77,W
0370:  MOVWF  30
....................    t1 = t2; 
0371:  MOVF   3B,W
0372:  MOVWF  37
0373:  MOVF   3A,W
0374:  MOVWF  36
0375:  MOVF   39,W
0376:  MOVWF  35
0377:  MOVF   38,W
0378:  MOVWF  34
.................... } 
....................  
0379:  BCF    0B.1
037A:  BCF    0A.3
037B:  BCF    0A.4
037C:  GOTO   02F
.................... #int_timer0 
.................... void tmr_int() 
.................... { 
....................    set_timer0(246); 
037D:  MOVLW  F6
037E:  MOVWF  01
....................    i++; 
037F:  INCF   40,F
0380:  BTFSC  03.2
0381:  INCF   41,F
....................  
....................    // Calculate integral of error 
....................    if (i % 20 == 0)                // Run every 1 second (assuming timer0 runs at 12MHz/4/256 = 12kHz) 
0382:  MOVF   41,W
0383:  MOVWF  70
0384:  MOVF   40,W
0385:  MOVWF  6F
0386:  CLRF   72
0387:  MOVLW  14
0388:  MOVWF  71
*
03AD:  MOVF   77,W
03AE:  MOVWF  73
03AF:  MOVF   7A,W
03B0:  MOVWF  74
03B1:  MOVF   73,F
03B2:  BTFSS  03.2
03B3:  GOTO   3D1
03B4:  MOVF   74,F
03B5:  BTFSS  03.2
03B6:  GOTO   3D1
....................    { 
....................       integralError += error; 
03B7:  BCF    03.1
03B8:  MOVF   49,W
03B9:  MOVWF  72
03BA:  MOVF   48,W
03BB:  MOVWF  71
03BC:  MOVF   47,W
03BD:  MOVWF  70
03BE:  MOVF   46,W
03BF:  MOVWF  6F
03C0:  MOVF   45,W
03C1:  MOVWF  76
03C2:  MOVF   44,W
03C3:  MOVWF  75
03C4:  MOVF   43,W
03C5:  MOVWF  74
03C6:  MOVF   42,W
03C7:  MOVWF  73
03C8:  CALL   0F9
03C9:  MOVF   7A,W
03CA:  MOVWF  49
03CB:  MOVF   79,W
03CC:  MOVWF  48
03CD:  MOVF   78,W
03CE:  MOVWF  47
03CF:  MOVF   77,W
03D0:  MOVWF  46
....................    } 
03D1:  BCF    0B.2
03D2:  BCF    0A.3
03D3:  BCF    0A.4
03D4:  GOTO   02F
.................... } 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  CLRF   2F
0804:  CLRF   2E
0805:  CLRF   33
0806:  CLRF   32
0807:  CLRF   31
0808:  CLRF   30
0809:  CLRF   37
080A:  CLRF   36
080B:  CLRF   35
080C:  CLRF   34
080D:  CLRF   3B
080E:  CLRF   3A
080F:  CLRF   39
0810:  CLRF   38
0811:  CLRF   3F
0812:  CLRF   3E
0813:  CLRF   3D
0814:  CLRF   3C
0815:  CLRF   41
0816:  CLRF   40
0817:  CLRF   45
0818:  CLRF   44
0819:  CLRF   43
081A:  CLRF   42
081B:  CLRF   49
081C:  CLRF   48
081D:  CLRF   47
081E:  CLRF   46
081F:  CLRF   4D
0820:  CLRF   4C
0821:  CLRF   4B
0822:  CLRF   4A
0823:  MOVLW  FF
0824:  MOVWF  4E
0825:  BSF    03.5
0826:  BSF    1F.0
0827:  BSF    1F.1
0828:  BSF    1F.2
0829:  BCF    1F.3
082A:  MOVLW  07
082B:  MOVWF  1C
082C:  BCF    03.7
.................... { 
....................    lcd_init(); 
082D:  BCF    0A.3
082E:  BCF    03.5
082F:  GOTO   454
0830:  BSF    0A.3
....................    lcd_cursor_on(TRUE); 
0831:  MOVLW  01
0832:  MOVWF  55
0833:  BCF    0A.3
0834:  GOTO   492
0835:  BSF    0A.3
....................    port_b_pullups(TRUE); 
0836:  BSF    03.5
0837:  BCF    01.7
....................    enable_interrupts(GLOBAL); 
0838:  MOVLW  C0
0839:  BCF    03.5
083A:  IORWF  0B,F
....................    clear_interrupt(int_ext); 
083B:  BCF    0B.1
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); 
083C:  BSF    03.5
083D:  MOVF   01,W
083E:  ANDLW  C0
083F:  IORLW  07
0840:  MOVWF  01
....................    set_timer0(246); 
0841:  MOVLW  F6
0842:  BCF    03.5
0843:  MOVWF  01
....................    enable_interrupts(int_timer0); 
0844:  BSF    0B.5
....................    enable_interrupts(int_ext); 
0845:  BSF    0B.4
....................    setup_adc_ports(AN0_AN1_AN3);   // A0 A1 A3 are configured for analog input pin 
0846:  BSF    03.5
0847:  BCF    1F.0
0848:  BCF    1F.1
0849:  BSF    1F.2
084A:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32);    // Enable ADC and set clock for ADC 
084B:  BCF    1F.6
084C:  BCF    03.5
084D:  BCF    1F.6
084E:  BSF    1F.7
084F:  BSF    03.5
0850:  BSF    1F.7
0851:  BCF    03.5
0852:  BSF    1F.0
....................    unsigned int16 result_1;        // Variable for A0 value 
....................    set_tris_c(0x00);               // Set all portb pins as output 
0853:  MOVLW  00
0854:  BSF    03.5
0855:  MOVWF  07
0856:  BCF    03.5
0857:  MOVWF  4E
....................    setup_ccp1(CCP_PWM);            // 4kHz PWM signal output at CCP1 pin 17 
0858:  BCF    4E.2
0859:  MOVF   4E,W
085A:  BSF    03.5
085B:  MOVWF  07
085C:  BCF    03.5
085D:  BCF    07.2
085E:  MOVLW  0C
085F:  MOVWF  17
....................  
....................    setup_timer_2(T2_DIV_BY_16, 255, 1); 
0860:  MOVLW  00
0861:  MOVWF  78
0862:  IORLW  06
0863:  MOVWF  12
0864:  MOVLW  FF
0865:  BSF    03.5
0866:  MOVWF  12
....................    set_pwm2_duty(0); 
0867:  BCF    03.5
0868:  CLRF   1B
....................    output_low(IN1); 
0869:  BCF    4E.3
086A:  MOVF   4E,W
086B:  BSF    03.5
086C:  MOVWF  07
086D:  BCF    03.5
086E:  BCF    07.3
....................    output_high(IN2); 
086F:  BCF    4E.4
0870:  MOVF   4E,W
0871:  BSF    03.5
0872:  MOVWF  07
0873:  BCF    03.5
0874:  BSF    07.4
....................  
....................    while (TRUE) 
....................    { 
....................       set_adc_channel(0);                    // Next analog reading will be from channel 0 
0875:  MOVLW  00
0876:  MOVWF  78
0877:  MOVF   1F,W
0878:  ANDLW  C7
0879:  IORWF  78,W
087A:  MOVWF  1F
....................       delay_us(10);                          // Allow time after channel selection and reading 
087B:  MOVLW  02
087C:  MOVWF  77
087D:  DECFSZ 77,F
087E:  GOTO   07D
087F:  GOTO   080
0880:  NOP
....................       result_1 = read_adc();                 // Start and read A/D 
0881:  BSF    1F.2
0882:  BTFSC  1F.2
0883:  GOTO   082
0884:  BSF    03.5
0885:  MOVF   1E,W
0886:  BCF    03.5
0887:  MOVWF  4F
0888:  MOVF   1E,W
0889:  MOVWF  50
....................       delay_us(10);                          // Allow time after channel selection and reading 
088A:  MOVLW  02
088B:  MOVWF  77
088C:  DECFSZ 77,F
088D:  GOTO   08C
088E:  GOTO   08F
088F:  NOP
0890:  CLRF   2B
0891:  BTFSC  0B.7
0892:  BSF    2B.7
0893:  BCF    0B.7
....................       pwmOut = result_1 * 0.249;              // Mapping analog input to PWM output 
0894:  MOVF   50,W
0895:  MOVWF  74
0896:  MOVF   4F,W
0897:  MOVWF  73
0898:  BCF    0A.3
0899:  CALL   056
089A:  BSF    0A.3
089B:  BTFSC  2B.7
089C:  BSF    0B.7
089D:  CLRF   2B
089E:  BTFSC  0B.7
089F:  BSF    2B.7
08A0:  BCF    0B.7
08A1:  MOVF   7A,W
08A2:  MOVWF  76
08A3:  MOVF   79,W
08A4:  MOVWF  75
08A5:  MOVF   78,W
08A6:  MOVWF  74
08A7:  MOVF   77,W
08A8:  MOVWF  73
08A9:  MOVLW  DB
08AA:  MOVWF  7E
08AB:  MOVLW  F9
08AC:  MOVWF  7D
08AD:  MOVLW  7E
08AE:  MOVWF  7C
08AF:  MOVLW  7C
08B0:  MOVWF  7B
08B1:  BCF    0A.3
08B2:  CALL   073
08B3:  BSF    0A.3
08B4:  BTFSC  2B.7
08B5:  BSF    0B.7
08B6:  MOVF   7A,W
08B7:  MOVWF  58
08B8:  MOVF   79,W
08B9:  MOVWF  57
08BA:  MOVF   78,W
08BB:  MOVWF  56
08BC:  MOVF   77,W
08BD:  MOVWF  55
08BE:  BCF    0A.3
08BF:  GOTO   4A1
08C0:  BSF    0A.3
08C1:  MOVF   79,W
08C2:  MOVWF  2D
08C3:  MOVF   78,W
08C4:  MOVWF  2C
....................       set_pwm1_duty(pwmOut);                  // Set pulse-width during which signal is high 
08C5:  MOVF   2D,W
08C6:  MOVWF  79
08C7:  MOVF   2C,W
08C8:  MOVWF  78
08C9:  RRF    79,F
08CA:  RRF    78,F
08CB:  RRF    79,F
08CC:  RRF    78,F
08CD:  RRF    79,F
08CE:  MOVF   78,W
08CF:  MOVWF  15
08D0:  RRF    79,F
08D1:  RRF    79,W
08D2:  ANDLW  30
08D3:  MOVWF  77
08D4:  MOVF   17,W
08D5:  ANDLW  CF
08D6:  IORWF  77,W
08D7:  MOVWF  17
08D8:  CLRF   2B
08D9:  BTFSC  0B.7
08DA:  BSF    2B.7
08DB:  BCF    0B.7
....................  
....................       // Read reference velocity from potentiometer within logical boundaries 
....................       reference = (float)result_1 / 1023.0;    // Scale potentiometer value to range [0, 1] 
08DC:  MOVF   50,W
08DD:  MOVWF  74
08DE:  MOVF   4F,W
08DF:  MOVWF  73
08E0:  BCF    0A.3
08E1:  CALL   056
08E2:  BSF    0A.3
08E3:  BTFSC  2B.7
08E4:  BSF    0B.7
08E5:  MOVF   7A,W
08E6:  MOVWF  58
08E7:  MOVF   79,W
08E8:  MOVWF  57
08E9:  MOVF   78,W
08EA:  MOVWF  56
08EB:  MOVF   77,W
08EC:  MOVWF  55
08ED:  CLRF   2B
08EE:  BTFSC  0B.7
08EF:  BSF    2B.7
08F0:  BCF    0B.7
08F1:  MOVF   58,W
08F2:  MOVWF  76
08F3:  MOVF   57,W
08F4:  MOVWF  75
08F5:  MOVF   56,W
08F6:  MOVWF  74
08F7:  MOVF   55,W
08F8:  MOVWF  73
08F9:  CLRF   7E
08FA:  MOVLW  C0
08FB:  MOVWF  7D
08FC:  MOVLW  7F
08FD:  MOVWF  7C
08FE:  MOVLW  88
08FF:  MOVWF  7B
0900:  BCF    0A.3
0901:  CALL   244
0902:  BSF    0A.3
0903:  BTFSC  2B.7
0904:  BSF    0B.7
0905:  MOVF   7A,W
0906:  MOVWF  4D
0907:  MOVF   79,W
0908:  MOVWF  4C
0909:  MOVF   78,W
090A:  MOVWF  4B
090B:  MOVF   77,W
090C:  MOVWF  4A
....................  
....................       // Calculate velocity error 
....................       error = reference - velo; 
090D:  BSF    03.1
090E:  CLRF   2B
090F:  BTFSC  0B.7
0910:  BSF    2B.7
0911:  BCF    0B.7
0912:  MOVF   4D,W
0913:  MOVWF  72
0914:  MOVF   4C,W
0915:  MOVWF  71
0916:  MOVF   4B,W
0917:  MOVWF  70
0918:  MOVF   4A,W
0919:  MOVWF  6F
091A:  MOVF   33,W
091B:  MOVWF  76
091C:  MOVF   32,W
091D:  MOVWF  75
091E:  MOVF   31,W
091F:  MOVWF  74
0920:  MOVF   30,W
0921:  MOVWF  73
0922:  BCF    0A.3
0923:  CALL   0F9
0924:  BSF    0A.3
0925:  BTFSC  2B.7
0926:  BSF    0B.7
0927:  MOVF   7A,W
0928:  MOVWF  45
0929:  MOVF   79,W
092A:  MOVWF  44
092B:  MOVF   78,W
092C:  MOVWF  43
092D:  MOVF   77,W
092E:  MOVWF  42
092F:  CLRF   2B
0930:  BTFSC  0B.7
0931:  BSF    2B.7
0932:  BCF    0B.7
....................  
....................       // Calculate control signal using P controller 
....................       float controlSignal = KP * error; 
0933:  CLRF   76
0934:  CLRF   75
0935:  CLRF   74
0936:  MOVLW  7E
0937:  MOVWF  73
0938:  MOVF   45,W
0939:  MOVWF  7E
093A:  MOVF   44,W
093B:  MOVWF  7D
093C:  MOVF   43,W
093D:  MOVWF  7C
093E:  MOVF   42,W
093F:  MOVWF  7B
0940:  BCF    0A.3
0941:  CALL   073
0942:  BSF    0A.3
0943:  BTFSC  2B.7
0944:  BSF    0B.7
0945:  MOVF   7A,W
0946:  MOVWF  54
0947:  MOVF   79,W
0948:  MOVWF  53
0949:  MOVF   78,W
094A:  MOVWF  52
094B:  MOVF   77,W
094C:  MOVWF  51
....................  
....................       // Apply control signal to the motor (IN1 and IN2 pins) 
....................  
....................       // Print values on LCD 
....................       lcd_gotoxy(1, 1); 
094D:  MOVLW  01
094E:  MOVWF  63
094F:  MOVWF  64
0950:  BCF    0A.3
0951:  CALL   4C2
0952:  BSF    0A.3
....................       printf(lcd_putc, "Ref:%.2f   ", reference); 
0953:  MOVLW  D5
0954:  BSF    03.6
0955:  MOVWF  0D
0956:  MOVLW  03
0957:  MOVWF  0F
0958:  BCF    03.0
0959:  MOVLW  04
095A:  BCF    03.6
095B:  MOVWF  55
095C:  BCF    0A.3
095D:  CALL   500
095E:  BSF    0A.3
095F:  MOVLW  89
0960:  MOVWF  04
0961:  MOVF   4D,W
0962:  MOVWF  58
0963:  MOVF   4C,W
0964:  MOVWF  57
0965:  MOVF   4B,W
0966:  MOVWF  56
0967:  MOVF   4A,W
0968:  MOVWF  55
0969:  MOVLW  02
096A:  MOVWF  59
096B:  BCF    0A.3
096C:  CALL   5A6
096D:  BSF    0A.3
096E:  MOVLW  20
096F:  MOVWF  62
0970:  BCF    0A.3
0971:  CALL   4D4
0972:  BSF    0A.3
0973:  MOVLW  20
0974:  MOVWF  62
0975:  BCF    0A.3
0976:  CALL   4D4
0977:  BSF    0A.3
0978:  MOVLW  20
0979:  MOVWF  62
097A:  BCF    0A.3
097B:  CALL   4D4
097C:  BSF    0A.3
....................       delay_ms(750); 
097D:  MOVLW  03
097E:  MOVWF  55
097F:  MOVLW  FA
0980:  MOVWF  63
0981:  BCF    0A.3
0982:  CALL   3ED
0983:  BSF    0A.3
0984:  DECFSZ 55,F
0985:  GOTO   17F
....................       printf(lcd_putc,"\f"); 
0986:  MOVLW  0C
0987:  MOVWF  62
0988:  BCF    0A.3
0989:  CALL   4D4
098A:  BSF    0A.3
....................       lcd_gotoxy(1, 1); 
098B:  MOVLW  01
098C:  MOVWF  63
098D:  MOVWF  64
098E:  BCF    0A.3
098F:  CALL   4C2
0990:  BSF    0A.3
....................       printf(lcd_putc, "Velo:%.2f  ", velo); 
0991:  MOVLW  DB
0992:  BSF    03.6
0993:  MOVWF  0D
0994:  MOVLW  03
0995:  MOVWF  0F
0996:  BCF    03.0
0997:  MOVLW  05
0998:  BCF    03.6
0999:  MOVWF  55
099A:  BCF    0A.3
099B:  CALL   500
099C:  BSF    0A.3
099D:  MOVLW  89
099E:  MOVWF  04
099F:  MOVF   33,W
09A0:  MOVWF  58
09A1:  MOVF   32,W
09A2:  MOVWF  57
09A3:  MOVF   31,W
09A4:  MOVWF  56
09A5:  MOVF   30,W
09A6:  MOVWF  55
09A7:  MOVLW  02
09A8:  MOVWF  59
09A9:  BCF    0A.3
09AA:  CALL   5A6
09AB:  BSF    0A.3
09AC:  MOVLW  20
09AD:  MOVWF  62
09AE:  BCF    0A.3
09AF:  CALL   4D4
09B0:  BSF    0A.3
09B1:  MOVLW  20
09B2:  MOVWF  62
09B3:  BCF    0A.3
09B4:  CALL   4D4
09B5:  BSF    0A.3
....................       delay_ms(750); 
09B6:  MOVLW  03
09B7:  MOVWF  55
09B8:  MOVLW  FA
09B9:  MOVWF  63
09BA:  BCF    0A.3
09BB:  CALL   3ED
09BC:  BSF    0A.3
09BD:  DECFSZ 55,F
09BE:  GOTO   1B8
....................       printf(lcd_putc,"\f"); 
09BF:  MOVLW  0C
09C0:  MOVWF  62
09C1:  BCF    0A.3
09C2:  CALL   4D4
09C3:  BSF    0A.3
....................       lcd_gotoxy(1, 1); 
09C4:  MOVLW  01
09C5:  MOVWF  63
09C6:  MOVWF  64
09C7:  BCF    0A.3
09C8:  CALL   4C2
09C9:  BSF    0A.3
....................       printf(lcd_putc, "Err:%.2f   ", error); 
09CA:  MOVLW  E1
09CB:  BSF    03.6
09CC:  MOVWF  0D
09CD:  MOVLW  03
09CE:  MOVWF  0F
09CF:  BCF    03.0
09D0:  MOVLW  04
09D1:  BCF    03.6
09D2:  MOVWF  55
09D3:  BCF    0A.3
09D4:  CALL   500
09D5:  BSF    0A.3
09D6:  MOVLW  89
09D7:  MOVWF  04
09D8:  MOVF   45,W
09D9:  MOVWF  58
09DA:  MOVF   44,W
09DB:  MOVWF  57
09DC:  MOVF   43,W
09DD:  MOVWF  56
09DE:  MOVF   42,W
09DF:  MOVWF  55
09E0:  MOVLW  02
09E1:  MOVWF  59
09E2:  BCF    0A.3
09E3:  CALL   5A6
09E4:  BSF    0A.3
09E5:  MOVLW  20
09E6:  MOVWF  62
09E7:  BCF    0A.3
09E8:  CALL   4D4
09E9:  BSF    0A.3
09EA:  MOVLW  20
09EB:  MOVWF  62
09EC:  BCF    0A.3
09ED:  CALL   4D4
09EE:  BSF    0A.3
09EF:  MOVLW  20
09F0:  MOVWF  62
09F1:  BCF    0A.3
09F2:  CALL   4D4
09F3:  BSF    0A.3
....................       delay_ms(750); 
09F4:  MOVLW  03
09F5:  MOVWF  55
09F6:  MOVLW  FA
09F7:  MOVWF  63
09F8:  BCF    0A.3
09F9:  CALL   3ED
09FA:  BSF    0A.3
09FB:  DECFSZ 55,F
09FC:  GOTO   1F6
....................       printf(lcd_putc,"\f"); 
09FD:  MOVLW  0C
09FE:  MOVWF  62
09FF:  BCF    0A.3
0A00:  CALL   4D4
0A01:  BSF    0A.3
....................       lcd_gotoxy(1, 1); 
0A02:  MOVLW  01
0A03:  MOVWF  63
0A04:  MOVWF  64
0A05:  BCF    0A.3
0A06:  CALL   4C2
0A07:  BSF    0A.3
....................       printf(lcd_putc, "IntErr:%.2f", integralError); 
0A08:  MOVLW  E7
0A09:  BSF    03.6
0A0A:  MOVWF  0D
0A0B:  MOVLW  03
0A0C:  MOVWF  0F
0A0D:  BCF    03.0
0A0E:  MOVLW  07
0A0F:  BCF    03.6
0A10:  MOVWF  55
0A11:  BCF    0A.3
0A12:  CALL   500
0A13:  BSF    0A.3
0A14:  MOVLW  89
0A15:  MOVWF  04
0A16:  MOVF   49,W
0A17:  MOVWF  58
0A18:  MOVF   48,W
0A19:  MOVWF  57
0A1A:  MOVF   47,W
0A1B:  MOVWF  56
0A1C:  MOVF   46,W
0A1D:  MOVWF  55
0A1E:  MOVLW  02
0A1F:  MOVWF  59
0A20:  BCF    0A.3
0A21:  CALL   5A6
0A22:  BSF    0A.3
....................       delay_ms(750); 
0A23:  MOVLW  03
0A24:  MOVWF  55
0A25:  MOVLW  FA
0A26:  MOVWF  63
0A27:  BCF    0A.3
0A28:  CALL   3ED
0A29:  BSF    0A.3
0A2A:  DECFSZ 55,F
0A2B:  GOTO   225
....................       printf(lcd_putc,"\f"); 
0A2C:  MOVLW  0C
0A2D:  MOVWF  62
0A2E:  BCF    0A.3
0A2F:  CALL   4D4
0A30:  BSF    0A.3
0A31:  GOTO   075
....................    } 
.................... } 
....................  
0A32:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
